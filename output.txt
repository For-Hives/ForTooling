The following text represents a project with code. The structure of the text consists of sections beginning with ----, followed by a single line containing the file path and file name, and then a variable number of lines containing the file contents. The text representing the project ends when the symbols --END-- are encountered. Any further text beyond --END-- is meant to be interpreted as instructions using the aforementioned project as context.
----
tsconfig.json
{
	"compilerOptions": {
		"target": "ES2017",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"plugins": [
			{
				"name": "next"
			}
		],
		"paths": {
			"@/*": ["./src/*"]
		}
	},
	"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
	"exclude": ["node_modules"]
}

----
renovate.json
{
	"$schema": "https://docs.renovatebot.com/renovate-schema.json",
	"extends": ["config:base"],
	"packageRules": [
		{
			"matchUpdateTypes": ["minor", "patch"],
			"matchCurrentVersion": "!/^0/",
			"automerge": true,
			"automergeType": "pr",
			"automergeStrategy": "squash"
		}
	]
}

----
prettier.config.js
module.exports = {
	arrowParens: 'avoid',
	bracketSpacing: true,
	embeddedLanguageFormatting: 'auto',
	endOfLine: 'auto',
	htmlWhitespaceSensitivity: 'css',
	insertPragma: false,
	jsxSingleQuote: true,
	plugins: ['prettier-plugin-tailwindcss'],
	printWidth: 80,
	proseWrap: 'preserve',
	quoteProps: 'as-needed',
	requirePragma: false,
	semi: false,
	singleQuote: true,
	tabWidth: 2,
	trailingComma: 'es5',
	useTabs: true,
	vueIndentScriptAndStyle: false,
}

----
postcss.config.mjs
/** @type {import('postcss-load-config').Config} */
const config = {
	plugins: {
		'@tailwindcss/postcss': {},
		autoprefixer: {},
	},
}

export default config

----
package.json
{
	"name": "for-tooling",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev",
		"build": "next build",
		"start": "next start",
		"lint": "next lint",
		"lint:fix": "next lint --fix",
		"format": "prettier --write .",
		"format:check": "prettier --check .",
		"tsc": "npx tsc --noEmit --watch",
		"prepare": "husky install"
	},
	"dependencies": {
		"@clerk/nextjs": "6.12.12",
		"@eslint/js": "9.23.0",
		"@headlessui/react": "2.2.0",
		"@heroicons/react": "2.2.0",
		"@radix-ui/react-avatar": "1.1.3",
		"@radix-ui/react-dialog": "1.1.6",
		"@radix-ui/react-icons": "1.3.2",
		"@radix-ui/react-separator": "1.1.2",
		"@radix-ui/react-slot": "1.1.2",
		"@radix-ui/react-tooltip": "1.1.8",
		"@types/canvas-confetti": "1.9.0",
		"autoprefixer": "10.4.21",
		"canvas-confetti": "1.9.3",
		"class-variance-authority": "0.7.1",
		"clsx": "2.1.1",
		"dayjs": "1.11.13",
		"framer-motion": "12.6.2",
		"heroicons": "2.2.0",
		"lucide-react": "0.485.0",
		"next": "15.2.4",
		"pocketbase": "0.25.2",
		"postcss": "8.5.3",
		"react": "19.1.0",
		"react-dom": "19.1.0",
		"react-use-measure": "2.1.7",
		"tailwind-merge": "3.0.2",
		"tw-animate-css": "1.2.5",
		"zod": "3.24.2",
		"zustand": "5.0.3"
	},
	"devDependencies": {
		"@eslint/eslintrc": "3.3.1",
		"@next/eslint-plugin-next": "15.2.4",
		"@tailwindcss/postcss": "4.0.17",
		"@types/node": "22.13.14",
		"@types/react": "19.0.12",
		"@types/react-dom": "19.0.4",
		"@typescript-eslint/eslint-plugin": "8.28.0",
		"@typescript-eslint/parser": "8.28.0",
		"eslint": "9.23.0",
		"eslint-config-next": "15.2.4",
		"eslint-config-prettier": "10.1.1",
		"eslint-plugin-perfectionist": "4.10.1",
		"eslint-plugin-prettier": "5.2.5",
		"eslint-plugin-react": "7.37.4",
		"husky": "9.1.7",
		"prettier": "3.5.3",
		"prettier-plugin-tailwindcss": "0.6.11",
		"tailwindcss": "4.0.17",
		"tailwindcss-animate": "1.0.7",
		"typescript": "5.8.2",
		"typescript-eslint": "8.28.0"
	}
}

----
next.config.ts
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
	/* config options here */
	images: {
		remotePatterns: [
			{
				hostname: '**.andy-cinquin.fr',
				protocol: 'https',
			},
			{
				hostname: '**.clerk.com',
				protocol: 'https',
			},
		],
	},
}

export default nextConfig

----
large.txt
src/types/types_pocketbase.ts
src/components/ui/stepper.tsx
src/components/ui/sidebar.tsx
src/components/ui/sheet.tsx
src/components/magicui/confetti.tsx
src/components/app/app-sidebar.tsx
src/app/globals.css
src/app/actions/services/pocketbase/userService.ts
src/app/actions/services/pocketbase/securityUtils.ts
src/app/actions/services/pocketbase/projectService.ts
src/app/actions/services/pocketbase/organizationService.ts
src/app/actions/services/pocketbase/equipmentService.ts
src/app/actions/services/pocketbase/assignmentService.ts
src/app/actions/equipment/manageEquipments.ts
src/app/(application)/app/page.tsx
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/page.tsx
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/OrganizationStep.tsx
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/CompletionStep.tsx
docs-and-prompts/technique-prompt-system.md
docs-and-prompts/stack-technique.md
docs-and-prompts/cahier-des-charges.md
docs-and-prompts/market/tunnel-conversion.md
docs-and-prompts/market/strategie-marketing-honnete.md
docs-and-prompts/market/strategie-marketing-fortooling.md
docs-and-prompts/market/pages-techniques-parcours.md
docs-and-prompts/market/pages-support-conversion.md
docs-and-prompts/market/pages-seo-sectorielles.md
docs-and-prompts/market/pages-essentielles.md
docs-and-prompts/market/contenu-landing-page.md

----
eslint.config.mjs
import { FlatCompat } from '@eslint/eslintrc'
import js from '@eslint/js'
import perfectionist from 'eslint-plugin-perfectionist'
import { defineConfig } from 'eslint/config'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const compat = new FlatCompat({
	allConfig: js.configs.all,
	baseDirectory: __dirname,
	recommendedConfig: js.configs.recommended,
})

export default defineConfig([
	{
		extends: compat.extends('next/core-web-vitals', 'next/typescript'),

		plugins: {
			perfectionist,
		},

		rules: {
			'no-console': [
				'error',
				{
					allow: ['warn', 'error', 'info'],
				},
			],

			'perfectionist/sort-enums': 'error',
			'perfectionist/sort-imports': ['error'],
			'perfectionist/sort-objects': 'error',
			'perfectionist/sort-variable-declarations': 'error',
		},

		settings: {
			perfectionist: {
				partitionByComment: false,
				partitionByNewLine: false,
				type: 'alphabetical',
			},
		},
	},
])

----
components.json
{
	"$schema": "https://ui.shadcn.com/schema.json",
	"style": "new-york",
	"rsc": true,
	"tsx": true,
	"tailwind": {
		"config": "",
		"css": "src/app/globals.css",
		"baseColor": "slate",
		"cssVariables": true,
		"prefix": ""
	},
	"aliases": {
		"components": "@/components",
		"utils": "@/lib/utils",
		"ui": "@/components/ui",
		"lib": "@/lib",
		"hooks": "@/hooks"
	},
	"iconLibrary": "lucide"
}

----
README.md
# Fortooling

--
api :

- https://api.fortooling.forhives.fr/_/
- See our vaultwarden for password and credentials

----
LICENSE
MIT License

Copyright (c) 2025 ForHives

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

----
src/middleware.ts
import {
	clerkClient,
	clerkMiddleware,
	createRouteMatcher,
} from '@clerk/nextjs/server'
const isProtectedRoute = createRouteMatcher(['/app(.*)'])

const isPublicRoute = createRouteMatcher([
	'/',
	'/app(.*)',
	'/pricing(.*)',
	'/legals(.*)',
	'/marketing-components(.*)',
	'/sign-in(.*)',
	'/sign-up(.*)',
	'/api(.*)',
	'/invitation(.*)',
	'/onboarding(.*)',
	'/create-organization(.*)',
	'/waitlist(.*)',
])

const isAdminRoute = createRouteMatcher(['/admin(.*)'])

export default clerkMiddleware(async (auth, req) => {
	if (isPublicRoute(req)) {
		return
	}

	const authAwaited = await auth()
	if (!authAwaited.userId) {
		return Response.redirect(new URL('/sign-in', req.url))
	}

	if (isAdminRoute(req)) {
		const userData = authAwaited.orgRole
		if (userData !== 'admin') {
			return Response.redirect(new URL('/', req.url))
		}
	}

	if (!authAwaited.orgId) {
		return Response.redirect(new URL('/onboarding', req.url))
	}

	const clerkClientInstance = await clerkClient()
	const userMetadata = await clerkClientInstance.users.getUser(
		authAwaited.userId
	)

	if (
		isProtectedRoute(req) &&
		!userMetadata?.publicMetadata?.hasCompletedOnboarding
	) {
		return Response.redirect(new URL('/onboarding', req.url))
	}

	if (isProtectedRoute(req)) await auth.protect()
})

export const config = {
	matcher: [
		// Skip Next.js internals and all static files, unless found in search params
		'/((?!_next|[^?]*\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',
		// Always run for API routes
		'/(api|trpc)(.*)',
	],
}

----
src/types/types_pocketbase.ts
/**
 * Common fields for all record models
 */
export interface BaseModel {
	id: string
	created: string
	updated: string
	collectionId: string
	collectionName: string
}

/**
 * Organization model
 */
export interface Organization extends BaseModel {
	name: string
	email: string | null
	phone: string | null
	address: string | null
	settings: Record<string, unknown> | null

	// Clerk integration fields
	clerkId: string

	// Stripe related fields
	stripeCustomerId?: string
	subscriptionId?: string
	subscriptionStatus?: string
	priceId?: string

	// Expanded relations
	expand?: Record<string, unknown>
}

/**
 * User model (auth collection)
 */
export interface User extends BaseModel {
	email: string
	emailVisibility: boolean
	verified: boolean
	name: string | null
	avatar?: string | null // File field
	phone: string | null
	role: string | null
	isAdmin: boolean
	canLogin: boolean
	lastLogin?: string

	// Clerk integration field
	clerkId?: string

	// Expanded relations
	// the user can be part of multiple organizations
	expand?: {
		organizationId?: Organization[]
	}
}

/**
 * Equipment model
 */
export interface Equipment extends BaseModel {
	organizationId: string // References Organization.id
	name: string | null
	qrNfcCode: string | null
	tags: string[]
	notes: string | null
	acquisitionDate: string | null // ISO date string
	parentEquipmentId: string | null // Self-reference

	// Expanded relations
	expand?: {
		organizationId?: Organization
		parentEquipmentId?: Equipment
	}
}

/**
 * Project model
 */
export interface Project extends BaseModel {
	name: string | null
	address: string | null
	notes: string | null
	startDate: string | null // ISO date string
	endDate: string | null // ISO date string
	organizationId: string // References Organization.id

	// Expanded relations
	expand?: {
		organizationId?: Organization
	}
}

/**
 * Assignment model
 */
export interface Assignment extends BaseModel {
	organizationId: string // References Organization.id
	equipmentId: string // References Equipment.id
	assignedToUserId: string | null // References User.id
	assignedToProjectId: string | null // References Project.id
	startDate: string | null // ISO date string
	endDate: string | null // ISO date string
	notes: string | null

	// Expanded relations
	expand?: {
		organizationId?: Organization
		equipmentId?: Equipment
		assignedToUserId?: User
		assignedToProjectId?: Project
	}
}

/**
 * Images model (this will be used to store images for the blog etc)
 */
export interface Image extends BaseModel {
	title: string | null
	alt: string | null
	caption: string | null
	image: string | null

	// Expanded relations
	expand?: Record<string, unknown>
}

/**
 * Filter options for list operations
 */
export interface ListOptions {
	filter?: string
	sort?: string
	expand?: string
	fields?: string
	skipTotal?: boolean
	page?: number
	perPage?: number
	requestKey?: string | null
}

/**
 * Common result format for paginated lists
 */
export interface ListResult<T> {
	page: number
	perPage: number
	totalItems: number
	totalPages: number
	items: T[]
}

----
src/stores/onboarding-store.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'

export type OnboardingStep = 1 | 2 | 3 | 4 | 5

interface OnboardingState {
	currentStep: OnboardingStep
	setCurrentStep: (step: OnboardingStep) => void
	isLoading: boolean
	setIsLoading: (loading: boolean) => void
	resetOnboarding: () => void
}

export const useOnboardingStore = create<OnboardingState>()(
	persist(
		set => ({
			currentStep: 1,
			isLoading: false,
			resetOnboarding: () => set({ currentStep: 1, isLoading: false }),
			setCurrentStep: step => set({ currentStep: step }),
			setIsLoading: loading => set({ isLoading: loading }),
		}),
		{
			name: 'onboarding-state',
		}
	)
)

----
src/lib/utils.ts
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs))
}

----
src/lib/tagsUtils.ts
/**
 * Convert tags array to string format for PocketBase storage
 * @param tags Array of tag strings
 * @returns JSON string representation or null
 */
export function tagsToStorage(tags?: string[]): string | null {
	if (!tags || tags.length === 0) return null
	return JSON.stringify(tags)
}

/**
 * Convert tags from PocketBase storage format to array for UI
 * @param tagsString JSON string or null from PocketBase
 * @returns Array of tag strings
 */
export function tagsFromStorage(tagsString: string | null): string[] {
	if (!tagsString) return []

	try {
		const parsed = JSON.parse(tagsString)
		if (Array.isArray(parsed)) {
			return parsed
		}
		// Handle case where it might be a comma-separated string
		if (typeof parsed === 'string') {
			return parsed
				.split(',')
				.map(tag => tag.trim())
				.filter(Boolean)
		}
		return []
	} catch (error) {
		// If JSON parsing fails, try treating it as a comma-separated string
		if (typeof tagsString === 'string') {
			return tagsString
				.split(',')
				.map(tag => tag.trim())
				.filter(Boolean)
		}
		return []
	}
}

----
src/hooks/use-mobile.ts
import * as React from 'react'

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
	const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

	React.useEffect(() => {
		const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
		const onChange = () => {
			setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
		}
		mql.addEventListener('change', onChange)
		setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
		return () => mql.removeEventListener('change', onChange)
	}, [])

	return !!isMobile
}

----
src/components/organization-sync.tsx
// src/components/organization-sync.tsx
'use client'
import { useOrganization } from '@clerk/nextjs'
import { useRouter, useParams } from 'next/navigation'
import { useEffect } from 'react'

export function OrganizationSync() {
	const { organization } = useOrganization()
	const params = useParams()
	const router = useRouter()
	const orgId = params?.orgId as string | undefined

	useEffect(() => {
		// If there's an active organization and it doesn't match the URL, update the URL
		if (organization && orgId && organization.id !== orgId) {
			router.replace(`/org/${organization.id}`)
		}

		// If there's no active organization but we have an orgId in the URL, set it as active
		if (!organization && orgId) {
			// This would require additional logic to set the active organization
		}
	}, [organization, orgId, router])

	return null
}

----
src/components/ui/tooltip.tsx
'use client'

import { cn } from '@/lib/utils'
import * as TooltipPrimitive from '@radix-ui/react-tooltip'
import * as React from 'react'

function TooltipProvider({
	delayDuration = 0,
	...props
}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {
	return (
		<TooltipPrimitive.Provider
			data-slot='tooltip-provider'
			delayDuration={delayDuration}
			{...props}
		/>
	)
}

function Tooltip({
	...props
}: React.ComponentProps<typeof TooltipPrimitive.Root>) {
	return (
		<TooltipProvider>
			<TooltipPrimitive.Root data-slot='tooltip' {...props} />
		</TooltipProvider>
	)
}

function TooltipTrigger({
	...props
}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {
	return <TooltipPrimitive.Trigger data-slot='tooltip-trigger' {...props} />
}

function TooltipContent({
	children,
	className,
	sideOffset = 0,
	...props
}: React.ComponentProps<typeof TooltipPrimitive.Content>) {
	return (
		<TooltipPrimitive.Portal>
			<TooltipPrimitive.Content
				data-slot='tooltip-content'
				sideOffset={sideOffset}
				className={cn(
					'animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-fit origin-(--radix-tooltip-content-transform-origin) rounded-md border bg-white px-3 py-1.5 text-xs text-balance text-[#0f2942]',
					className
				)}
				{...props}
			>
				{children}
				<TooltipPrimitive.Arrow className='z-50 size-2.5 translate-y-[calc(-50%_-_2px)] rotate-45 rounded-[2px] bg-white fill-white' />
			</TooltipPrimitive.Content>
		</TooltipPrimitive.Portal>
	)
}

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

----
src/components/ui/stepper.tsx
'use client'

import { cn } from '@/lib/utils'
import { CheckIcon } from '@radix-ui/react-icons'
import { LoaderCircle } from 'lucide-react'
import * as React from 'react'
import { createContext, useContext } from 'react'

// Types
type StepperContextValue = {
	activeStep: number
	setActiveStep: (step: number) => void
	orientation: 'horizontal' | 'vertical'
}

type StepItemContextValue = {
	step: number
	state: StepState
	isDisabled: boolean
	isLoading: boolean
}

type StepState = 'active' | 'completed' | 'inactive' | 'loading'

// Contexts
const StepperContext = createContext<StepperContextValue | undefined>(undefined)
const StepItemContext = createContext<StepItemContextValue | undefined>(
	undefined
)

const useStepper = () => {
	const context = useContext(StepperContext)
	if (!context) {
		throw new Error('useStepper must be used within a Stepper')
	}
	return context
}

const useStepItem = () => {
	const context = useContext(StepItemContext)
	if (!context) {
		throw new Error('useStepItem must be used within a StepperItem')
	}
	return context
}

// Components
interface StepperProps extends React.HTMLAttributes<HTMLDivElement> {
	defaultValue?: number
	value?: number
	onValueChange?: (value: number) => void
	orientation?: 'horizontal' | 'vertical'
}

const Stepper = React.forwardRef<HTMLDivElement, StepperProps>(
	(
		{
			className,
			defaultValue = 0,
			onValueChange,
			orientation = 'horizontal',
			value,
			...props
		},
		ref
	) => {
		const [activeStep, setInternalStep] = React.useState(defaultValue)

		const setActiveStep = React.useCallback(
			(step: number) => {
				if (value === undefined) {
					setInternalStep(step)
				}
				onValueChange?.(step)
			},
			[value, onValueChange]
		)

		const currentStep = value ?? activeStep

		return (
			<StepperContext.Provider
				value={{
					activeStep: currentStep,
					orientation,
					setActiveStep,
				}}
			>
				<div
					ref={ref}
					className={cn(
						'group/stepper inline-flex data-[orientation=horizontal]:w-full data-[orientation=horizontal]:flex-row data-[orientation=vertical]:flex-col',
						className
					)}
					data-orientation={orientation}
					{...props}
				/>
			</StepperContext.Provider>
		)
	}
)
Stepper.displayName = 'Stepper'

// StepperItem
interface StepperItemProps extends React.HTMLAttributes<HTMLDivElement> {
	step: number
	completed?: boolean
	disabled?: boolean
	loading?: boolean
}

const StepperItem = React.forwardRef<HTMLDivElement, StepperItemProps>(
	(
		{
			children,
			className,
			completed = false,
			disabled = false,
			loading = false,
			step,
			...props
		},
		ref
	) => {
		const { activeStep } = useStepper()

		const state: StepState =
			completed || step < activeStep
				? 'completed'
				: activeStep === step
					? 'active'
					: 'inactive'

		const isLoading = loading && step === activeStep

		return (
			<StepItemContext.Provider
				value={{ isDisabled: disabled, isLoading, state, step }}
			>
				<div
					ref={ref}
					className={cn(
						'group/step flex items-center group-data-[orientation=horizontal]/stepper:flex-row group-data-[orientation=vertical]/stepper:flex-col',
						className
					)}
					data-state={state}
					{...(isLoading ? { 'data-loading': true } : {})}
					{...props}
				>
					{children}
				</div>
			</StepItemContext.Provider>
		)
	}
)
StepperItem.displayName = 'StepperItem'

// StepperTrigger
interface StepperTriggerProps
	extends React.ButtonHTMLAttributes<HTMLButtonElement> {
	asChild?: boolean
}

const StepperTrigger = React.forwardRef<HTMLButtonElement, StepperTriggerProps>(
	({ asChild = false, children, className, ...props }, ref) => {
		const { setActiveStep } = useStepper()
		const { isDisabled, step } = useStepItem()

		if (asChild) {
			return <div className={className}>{children}</div>
		}

		return (
			<button
				ref={ref}
				className={cn(
					'inline-flex items-center gap-3 disabled:pointer-events-none disabled:opacity-50',
					className
				)}
				onClick={() => setActiveStep(step)}
				disabled={isDisabled}
				{...props}
			>
				{children}
			</button>
		)
	}
)
StepperTrigger.displayName = 'StepperTrigger'

// StepperIndicator
interface StepperIndicatorProps extends React.HTMLAttributes<HTMLDivElement> {
	asChild?: boolean
}

const StepperIndicator = React.forwardRef<
	HTMLDivElement,
	StepperIndicatorProps
>(({ asChild = false, children, className, ...props }, ref) => {
	const { isLoading, state, step } = useStepItem()

	return (
		<div
			ref={ref}
			className={cn(
				'bg-muted text-muted-foreground data-[state=active]:bg-primary data-[state=completed]:bg-primary data-[state=active]:text-primary-foreground data-[state=completed]:text-primary-foreground relative flex size-6 shrink-0 items-center justify-center rounded-full text-xs font-medium',
				className
			)}
			data-state={state}
			{...props}
		>
			{asChild ? (
				children
			) : (
				<>
					<span className='transition-all group-data-[loading=true]/step:scale-0 group-data-[loading=true]/step:opacity-0 group-data-[loading=true]/step:transition-none group-data-[state=completed]/step:scale-0 group-data-[state=completed]/step:opacity-0'>
						{step}
					</span>
					<CheckIcon
						className='absolute scale-0 opacity-0 transition-all group-data-[state=completed]/step:scale-100 group-data-[state=completed]/step:opacity-100'
						size={16}
						strokeWidth={2}
						aria-hidden='true'
					/>
					{isLoading && (
						<span className='absolute transition-all'>
							<LoaderCircle
								className='animate-spin'
								size={14}
								strokeWidth={2}
								aria-hidden='true'
							/>
						</span>
					)}
				</>
			)}
		</div>
	)
})
StepperIndicator.displayName = 'StepperIndicator'

// StepperTitle
const StepperTitle = React.forwardRef<
	HTMLHeadingElement,
	React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
	<h3 ref={ref} className={cn('text-sm font-medium', className)} {...props} />
))
StepperTitle.displayName = 'StepperTitle'

// StepperDescription
const StepperDescription = React.forwardRef<
	HTMLParagraphElement,
	React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
	<p
		ref={ref}
		className={cn('text-muted-foreground text-sm', className)}
		{...props}
	/>
))
StepperDescription.displayName = 'StepperDescription'

// StepperSeparator
const StepperSeparator = React.forwardRef<
	HTMLDivElement,
	React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
	return (
		<div
			ref={ref}
			className={cn(
				'bg-muted group-data-[state=completed]/step:bg-primary m-0.5 group-data-[orientation=horizontal]/stepper:h-0.5 group-data-[orientation=horizontal]/stepper:w-full group-data-[orientation=horizontal]/stepper:flex-1 group-data-[orientation=vertical]/stepper:h-12 group-data-[orientation=vertical]/stepper:w-0.5',
				className
			)}
			{...props}
		/>
	)
})
StepperSeparator.displayName = 'StepperSeparator'

export {
	Stepper,
	StepperDescription,
	StepperIndicator,
	StepperItem,
	StepperSeparator,
	StepperTitle,
	StepperTrigger,
}

----
src/components/ui/spotlight-card.tsx
'use client'
import React, { useRef, useState } from 'react'

interface Position {
	x: number
	y: number
}

interface SpotlightCardProps extends React.PropsWithChildren {
	className?: string
	spotlightColor?: `rgba(${number}, ${number}, ${number}, ${number})`
}

const SpotlightCard: React.FC<SpotlightCardProps> = ({
	children,
	className = '',
	spotlightColor = 'rgba(255, 255, 255, 0.25)',
}) => {
	const divRef = useRef<HTMLDivElement>(null)
	const [isFocused, setIsFocused] = useState<boolean>(false)
	const [position, setPosition] = useState<Position>({ x: 0, y: 0 })
	const [opacity, setOpacity] = useState<number>(0)

	const handleMouseMove: React.MouseEventHandler<HTMLDivElement> = e => {
		if (!divRef.current || isFocused) return

		const rect = divRef.current.getBoundingClientRect()
		setPosition({ x: e.clientX - rect.left, y: e.clientY - rect.top })
	}

	const handleFocus = () => {
		setIsFocused(true)
		setOpacity(0.6)
	}

	const handleBlur = () => {
		setIsFocused(false)
		setOpacity(0)
	}

	const handleMouseEnter = () => {
		setOpacity(0.6)
	}

	const handleMouseLeave = () => {
		setOpacity(0)
	}

	return (
		<div
			ref={divRef}
			onMouseMove={handleMouseMove}
			onFocus={handleFocus}
			onBlur={handleBlur}
			onMouseEnter={handleMouseEnter}
			onMouseLeave={handleMouseLeave}
			className={`relative overflow-hidden rounded-3xl border border-neutral-800/10 bg-neutral-900 p-8 ${className}`}
		>
			<div
				className='pointer-events-none absolute inset-0 opacity-0 transition-opacity duration-500 ease-in-out'
				style={{
					background: `radial-gradient(circle at ${position.x}px ${position.y}px, ${spotlightColor}, transparent 80%)`,
					opacity,
				}}
			/>
			{children}
		</div>
	)
}

export default SpotlightCard

----
src/components/ui/skeleton.tsx
import { cn } from '@/lib/utils'

function Skeleton({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='skeleton'
			className={cn('bg-accent animate-pulse rounded-md', className)}
			{...props}
		/>
	)
}

export { Skeleton }

----
src/components/ui/sidebar.tsx
'use client'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Separator } from '@/components/ui/separator'
import {
	Sheet,
	SheetContent,
	SheetDescription,
	SheetHeader,
	SheetTitle,
} from '@/components/ui/sheet'
import { Skeleton } from '@/components/ui/skeleton'
import {
	Tooltip,
	TooltipContent,
	TooltipProvider,
	TooltipTrigger,
} from '@/components/ui/tooltip'
import { useIsMobile } from '@/hooks/use-mobile'
import { cn } from '@/lib/utils'
import { Slot } from '@radix-ui/react-slot'
import { VariantProps, cva } from 'class-variance-authority'
import { PanelLeftIcon } from 'lucide-react'
import * as React from 'react'

const SIDEBAR_COOKIE_NAME = 'sidebar_state'
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = '16rem'
const SIDEBAR_WIDTH_MOBILE = '18rem'
const SIDEBAR_WIDTH_ICON = '3rem'
const SIDEBAR_KEYBOARD_SHORTCUT = 'b'

type SidebarContextProps = {
	state: 'expanded' | 'collapsed'
	open: boolean
	setOpen: (open: boolean) => void
	openMobile: boolean
	setOpenMobile: (open: boolean) => void
	isMobile: boolean
	toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContextProps | null>(null)

function useSidebar() {
	const context = React.useContext(SidebarContext)
	if (!context) {
		throw new Error('useSidebar must be used within a SidebarProvider.')
	}

	return context
}

function SidebarProvider({
	children,
	className,
	defaultOpen = true,
	onOpenChange: setOpenProp,
	open: openProp,
	style,
	...props
}: React.ComponentProps<'div'> & {
	defaultOpen?: boolean
	open?: boolean
	onOpenChange?: (open: boolean) => void
}) {
	const isMobile = useIsMobile()
	const [openMobile, setOpenMobile] = React.useState(false)

	// This is the internal state of the sidebar.
	// We use openProp and setOpenProp for control from outside the component.
	const [_open, _setOpen] = React.useState(defaultOpen)
	const open = openProp ?? _open
	const setOpen = React.useCallback(
		(value: boolean | ((value: boolean) => boolean)) => {
			const openState = typeof value === 'function' ? value(open) : value
			if (setOpenProp) {
				setOpenProp(openState)
			} else {
				_setOpen(openState)
			}

			// This sets the cookie to keep the sidebar state.
			document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
		},
		[setOpenProp, open]
	)

	// Helper to toggle the sidebar.
	const toggleSidebar = React.useCallback(() => {
		return isMobile ? setOpenMobile(open => !open) : setOpen(open => !open)
	}, [isMobile, setOpen, setOpenMobile])

	// Adds a keyboard shortcut to toggle the sidebar.
	React.useEffect(() => {
		const handleKeyDown = (event: KeyboardEvent) => {
			if (
				event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
				(event.metaKey || event.ctrlKey)
			) {
				event.preventDefault()
				toggleSidebar()
			}
		}

		window.addEventListener('keydown', handleKeyDown)
		return () => window.removeEventListener('keydown', handleKeyDown)
	}, [toggleSidebar])

	// We add a state so that we can do data-state="expanded" or "collapsed".
	// This makes it easier to style the sidebar with Tailwind classes.
	const state = open ? 'expanded' : 'collapsed'

	const contextValue = React.useMemo<SidebarContextProps>(
		() => ({
			isMobile,
			open,
			openMobile,
			setOpen,
			setOpenMobile,
			state,
			toggleSidebar,
		}),
		[state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
	)

	return (
		<SidebarContext.Provider value={contextValue}>
			<TooltipProvider delayDuration={0}>
				<div
					data-slot='sidebar-wrapper'
					style={
						{
							'--sidebar-width': SIDEBAR_WIDTH,
							'--sidebar-width-icon': SIDEBAR_WIDTH_ICON,
							...style,
						} as React.CSSProperties
					}
					className={cn(
						'group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full',
						className
					)}
					{...props}
				>
					{children}
				</div>
			</TooltipProvider>
		</SidebarContext.Provider>
	)
}

function Sidebar({
	children,
	className,
	collapsible = 'offcanvas',
	side = 'left',
	variant = 'sidebar',
	...props
}: React.ComponentProps<'div'> & {
	side?: 'left' | 'right'
	variant?: 'sidebar' | 'floating' | 'inset'
	collapsible?: 'offcanvas' | 'icon' | 'none'
}) {
	const { isMobile, openMobile, setOpenMobile, state } = useSidebar()

	if (collapsible === 'none') {
		return (
			<div
				data-slot='sidebar'
				className={cn(
					'bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col',
					className
				)}
				{...props}
			>
				{children}
			</div>
		)
	}

	if (isMobile) {
		return (
			<Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
				<SheetContent
					data-sidebar='sidebar'
					data-slot='sidebar'
					data-mobile='true'
					className='bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden'
					style={
						{
							'--sidebar-width': SIDEBAR_WIDTH_MOBILE,
						} as React.CSSProperties
					}
					side={side}
				>
					<SheetHeader className='sr-only'>
						<SheetTitle>Sidebar</SheetTitle>
						<SheetDescription>Displays the mobile sidebar.</SheetDescription>
					</SheetHeader>
					<div className='flex h-full w-full flex-col'>{children}</div>
				</SheetContent>
			</Sheet>
		)
	}

	return (
		<div
			className='group peer text-sidebar-foreground hidden md:block'
			data-state={state}
			data-collapsible={state === 'collapsed' ? collapsible : ''}
			data-variant={variant}
			data-side={side}
			data-slot='sidebar'
		>
			{/* This is what handles the sidebar gap on desktop */}
			<div
				data-slot='sidebar-gap'
				className={cn(
					'relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear',
					'group-data-[collapsible=offcanvas]:w-0',
					'group-data-[side=right]:rotate-180',
					variant === 'floating' || variant === 'inset'
						? 'group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]'
						: 'group-data-[collapsible=icon]:w-(--sidebar-width-icon)'
				)}
			/>
			<div
				data-slot='sidebar-container'
				className={cn(
					'fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex',
					side === 'left'
						? 'left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]'
						: 'right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]',
					// Adjust the padding for floating and inset variants.
					variant === 'floating' || variant === 'inset'
						? 'p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]'
						: 'group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l',
					className
				)}
				{...props}
			>
				<div
					data-sidebar='sidebar'
					data-slot='sidebar-inner'
					className='bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm'
				>
					{children}
				</div>
			</div>
		</div>
	)
}

function SidebarTrigger({
	className,
	onClick,
	...props
}: React.ComponentProps<typeof Button>) {
	const { toggleSidebar } = useSidebar()

	return (
		<Button
			data-sidebar='trigger'
			data-slot='sidebar-trigger'
			variant='ghost'
			size='icon'
			className={cn('size-7', className)}
			onClick={event => {
				onClick?.(event)
				toggleSidebar()
			}}
			{...props}
		>
			<PanelLeftIcon />
			<span className='sr-only'>Toggle Sidebar</span>
		</Button>
	)
}

function SidebarRail({ className, ...props }: React.ComponentProps<'button'>) {
	const { toggleSidebar } = useSidebar()

	return (
		<button
			data-sidebar='rail'
			data-slot='sidebar-rail'
			aria-label='Toggle Sidebar'
			tabIndex={-1}
			onClick={toggleSidebar}
			title='Toggle Sidebar'
			className={cn(
				'hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex',
				'in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize',
				'[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize',
				'hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full',
				'[[data-side=left][data-collapsible=offcanvas]_&]:-right-2',
				'[[data-side=right][data-collapsible=offcanvas]_&]:-left-2',
				className
			)}
			{...props}
		/>
	)
}

function SidebarInset({ className, ...props }: React.ComponentProps<'main'>) {
	return (
		<main
			data-slot='sidebar-inset'
			className={cn(
				'bg-background relative flex w-full flex-1 flex-col',
				'md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2',
				className
			)}
			{...props}
		/>
	)
}

function SidebarInput({
	className,
	...props
}: React.ComponentProps<typeof Input>) {
	return (
		<Input
			data-slot='sidebar-input'
			data-sidebar='input'
			className={cn('bg-background h-8 w-full shadow-none', className)}
			{...props}
		/>
	)
}

function SidebarHeader({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sidebar-header'
			data-sidebar='header'
			className={cn('flex flex-col gap-2 p-2', className)}
			{...props}
		/>
	)
}

function SidebarFooter({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sidebar-footer'
			data-sidebar='footer'
			className={cn('flex flex-col gap-2 p-2', className)}
			{...props}
		/>
	)
}

function SidebarSeparator({
	className,
	...props
}: React.ComponentProps<typeof Separator>) {
	return (
		<Separator
			data-slot='sidebar-separator'
			data-sidebar='separator'
			className={cn('bg-sidebar-border mx-2 w-auto', className)}
			{...props}
		/>
	)
}

function SidebarContent({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sidebar-content'
			data-sidebar='content'
			className={cn(
				'flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden',
				className
			)}
			{...props}
		/>
	)
}

function SidebarGroup({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sidebar-group'
			data-sidebar='group'
			className={cn('relative flex w-full min-w-0 flex-col p-2', className)}
			{...props}
		/>
	)
}

function SidebarGroupLabel({
	asChild = false,
	className,
	...props
}: React.ComponentProps<'div'> & { asChild?: boolean }) {
	const Comp = asChild ? Slot : 'div'

	return (
		<Comp
			data-slot='sidebar-group-label'
			data-sidebar='group-label'
			className={cn(
				'text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
				'group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0',
				className
			)}
			{...props}
		/>
	)
}

function SidebarGroupAction({
	asChild = false,
	className,
	...props
}: React.ComponentProps<'button'> & { asChild?: boolean }) {
	const Comp = asChild ? Slot : 'button'

	return (
		<Comp
			data-slot='sidebar-group-action'
			data-sidebar='group-action'
			className={cn(
				'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
				// Increases the hit area of the button on mobile.
				'after:absolute after:-inset-2 md:after:hidden',
				'group-data-[collapsible=icon]:hidden',
				className
			)}
			{...props}
		/>
	)
}

function SidebarGroupContent({
	className,
	...props
}: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sidebar-group-content'
			data-sidebar='group-content'
			className={cn('w-full text-sm', className)}
			{...props}
		/>
	)
}

function SidebarMenu({ className, ...props }: React.ComponentProps<'ul'>) {
	return (
		<ul
			data-slot='sidebar-menu'
			data-sidebar='menu'
			className={cn('flex w-full min-w-0 flex-col gap-1', className)}
			{...props}
		/>
	)
}

function SidebarMenuItem({ className, ...props }: React.ComponentProps<'li'>) {
	return (
		<li
			data-slot='sidebar-menu-item'
			data-sidebar='menu-item'
			className={cn('group/menu-item relative', className)}
			{...props}
		/>
	)
}

const sidebarMenuButtonVariants = cva(
	'peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
	{
		defaultVariants: {
			size: 'default',
			variant: 'default',
		},
		variants: {
			size: {
				default: 'h-8 text-sm',
				lg: 'h-12 text-sm group-data-[collapsible=icon]:p-0!',
				sm: 'h-7 text-xs',
			},
			variant: {
				default: 'hover:bg-sidebar-accent hover:text-sidebar-accent-foreground',
				outline:
					'bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]',
			},
		},
	}
)

function SidebarMenuButton({
	asChild = false,
	className,
	isActive = false,
	size = 'default',
	tooltip,
	variant = 'default',
	...props
}: React.ComponentProps<'button'> & {
	asChild?: boolean
	isActive?: boolean
	tooltip?: string | React.ComponentProps<typeof TooltipContent>
} & VariantProps<typeof sidebarMenuButtonVariants>) {
	const Comp = asChild ? Slot : 'button'
	const { isMobile, state } = useSidebar()

	const button = (
		<Comp
			data-slot='sidebar-menu-button'
			data-sidebar='menu-button'
			data-size={size}
			data-active={isActive}
			className={cn(sidebarMenuButtonVariants({ size, variant }), className)}
			{...props}
		/>
	)

	if (!tooltip) {
		return button
	}

	if (typeof tooltip === 'string') {
		tooltip = {
			children: tooltip,
		}
	}

	return (
		<Tooltip>
			<TooltipTrigger asChild>{button}</TooltipTrigger>
			<TooltipContent
				side='right'
				align='center'
				hidden={state !== 'collapsed' || isMobile}
				{...tooltip}
			/>
		</Tooltip>
	)
}

function SidebarMenuAction({
	asChild = false,
	className,
	showOnHover = false,
	...props
}: React.ComponentProps<'button'> & {
	asChild?: boolean
	showOnHover?: boolean
}) {
	const Comp = asChild ? Slot : 'button'

	return (
		<Comp
			data-slot='sidebar-menu-action'
			data-sidebar='menu-action'
			className={cn(
				'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0',
				// Increases the hit area of the button on mobile.
				'after:absolute after:-inset-2 md:after:hidden',
				'peer-data-[size=sm]/menu-button:top-1',
				'peer-data-[size=default]/menu-button:top-1.5',
				'peer-data-[size=lg]/menu-button:top-2.5',
				'group-data-[collapsible=icon]:hidden',
				showOnHover &&
					'peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0',
				className
			)}
			{...props}
		/>
	)
}

function SidebarMenuBadge({
	className,
	...props
}: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sidebar-menu-badge'
			data-sidebar='menu-badge'
			className={cn(
				'text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none',
				'peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground',
				'peer-data-[size=sm]/menu-button:top-1',
				'peer-data-[size=default]/menu-button:top-1.5',
				'peer-data-[size=lg]/menu-button:top-2.5',
				'group-data-[collapsible=icon]:hidden',
				className
			)}
			{...props}
		/>
	)
}

function SidebarMenuSkeleton({
	className,
	showIcon = false,
	...props
}: React.ComponentProps<'div'> & {
	showIcon?: boolean
}) {
	// Random width between 50 to 90%.
	const width = React.useMemo(() => {
		return `${Math.floor(Math.random() * 40) + 50}%`
	}, [])

	return (
		<div
			data-slot='sidebar-menu-skeleton'
			data-sidebar='menu-skeleton'
			className={cn('flex h-8 items-center gap-2 rounded-md px-2', className)}
			{...props}
		>
			{showIcon && (
				<Skeleton
					className='size-4 rounded-md'
					data-sidebar='menu-skeleton-icon'
				/>
			)}
			<Skeleton
				className='h-4 max-w-(--skeleton-width) flex-1'
				data-sidebar='menu-skeleton-text'
				style={
					{
						'--skeleton-width': width,
					} as React.CSSProperties
				}
			/>
		</div>
	)
}

function SidebarMenuSub({ className, ...props }: React.ComponentProps<'ul'>) {
	return (
		<ul
			data-slot='sidebar-menu-sub'
			data-sidebar='menu-sub'
			className={cn(
				'border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5',
				'group-data-[collapsible=icon]:hidden',
				className
			)}
			{...props}
		/>
	)
}

function SidebarMenuSubItem({
	className,
	...props
}: React.ComponentProps<'li'>) {
	return (
		<li
			data-slot='sidebar-menu-sub-item'
			data-sidebar='menu-sub-item'
			className={cn('group/menu-sub-item relative', className)}
			{...props}
		/>
	)
}

function SidebarMenuSubButton({
	asChild = false,
	className,
	isActive = false,
	size = 'md',
	...props
}: React.ComponentProps<'a'> & {
	asChild?: boolean
	size?: 'sm' | 'md'
	isActive?: boolean
}) {
	const Comp = asChild ? Slot : 'a'

	return (
		<Comp
			data-slot='sidebar-menu-sub-button'
			data-sidebar='menu-sub-button'
			data-size={size}
			data-active={isActive}
			className={cn(
				'text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0',
				'data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground',
				size === 'sm' && 'text-xs',
				size === 'md' && 'text-sm',
				'group-data-[collapsible=icon]:hidden',
				className
			)}
			{...props}
		/>
	)
}

export {
	Sidebar,
	SidebarContent,
	SidebarFooter,
	SidebarGroup,
	SidebarGroupAction,
	SidebarGroupContent,
	SidebarGroupLabel,
	SidebarHeader,
	SidebarInput,
	SidebarInset,
	SidebarMenu,
	SidebarMenuAction,
	SidebarMenuBadge,
	SidebarMenuButton,
	SidebarMenuItem,
	SidebarMenuSkeleton,
	SidebarMenuSub,
	SidebarMenuSubButton,
	SidebarMenuSubItem,
	SidebarProvider,
	SidebarRail,
	SidebarSeparator,
	SidebarTrigger,
	useSidebar,
}

----
src/components/ui/sheet.tsx
'use client'

import { cn } from '@/lib/utils'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { XIcon } from 'lucide-react'
import * as React from 'react'

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
	return <SheetPrimitive.Root data-slot='sheet' {...props} />
}

function SheetTrigger({
	...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
	return <SheetPrimitive.Trigger data-slot='sheet-trigger' {...props} />
}

function SheetClose({
	...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
	return <SheetPrimitive.Close data-slot='sheet-close' {...props} />
}

function SheetPortal({
	...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
	return <SheetPrimitive.Portal data-slot='sheet-portal' {...props} />
}

function SheetOverlay({
	className,
	...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
	return (
		<SheetPrimitive.Overlay
			data-slot='sheet-overlay'
			className={cn(
				'data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50',
				className
			)}
			{...props}
		/>
	)
}

function SheetContent({
	children,
	className,
	side = 'right',
	...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
	side?: 'top' | 'right' | 'bottom' | 'left'
}) {
	return (
		<SheetPortal>
			<SheetOverlay />
			<SheetPrimitive.Content
				data-slot='sheet-content'
				className={cn(
					'bg-background data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
					side === 'right' &&
						'data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm',
					side === 'left' &&
						'data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm',
					side === 'top' &&
						'data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b',
					side === 'bottom' &&
						'data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto border-t',
					className
				)}
				{...props}
			>
				{children}
				<SheetPrimitive.Close className='ring-offset-background focus:ring-ring data-[state=open]:bg-secondary absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none'>
					<XIcon className='size-4' />
					<span className='sr-only'>Close</span>
				</SheetPrimitive.Close>
			</SheetPrimitive.Content>
		</SheetPortal>
	)
}

function SheetHeader({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sheet-header'
			className={cn('flex flex-col gap-1.5 p-4', className)}
			{...props}
		/>
	)
}

function SheetFooter({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='sheet-footer'
			className={cn('mt-auto flex flex-col gap-2 p-4', className)}
			{...props}
		/>
	)
}

function SheetTitle({
	className,
	...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
	return (
		<SheetPrimitive.Title
			data-slot='sheet-title'
			className={cn('text-foreground font-semibold', className)}
			{...props}
		/>
	)
}

function SheetDescription({
	className,
	...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
	return (
		<SheetPrimitive.Description
			data-slot='sheet-description'
			className={cn('text-muted-foreground text-sm', className)}
			{...props}
		/>
	)
}

export {
	Sheet,
	SheetTrigger,
	SheetClose,
	SheetContent,
	SheetHeader,
	SheetFooter,
	SheetTitle,
	SheetDescription,
}

----
src/components/ui/separator.tsx
'use client'

import { cn } from '@/lib/utils'
import * as SeparatorPrimitive from '@radix-ui/react-separator'
import * as React from 'react'

function Separator({
	className,
	decorative = true,
	orientation = 'horizontal',
	...props
}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {
	return (
		<SeparatorPrimitive.Root
			data-slot='separator-root'
			decorative={decorative}
			orientation={orientation}
			className={cn(
				'bg-border shrink-0 data-[orientation=horizontal]:h-px data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-px',
				className
			)}
			{...props}
		/>
	)
}

export { Separator }

----
src/components/ui/input.tsx
import { cn } from '@/lib/utils'
import * as React from 'react'

function Input({ className, type, ...props }: React.ComponentProps<'input'>) {
	return (
		<input
			type={type}
			data-slot='input'
			className={cn(
				'file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
				'focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]',
				'aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive',
				className
			)}
			{...props}
		/>
	)
}

export { Input }

----
src/components/ui/card.tsx
import { cn } from '@/lib/utils'
import * as React from 'react'

function Card({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card'
			className={cn(
				'bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm',
				className
			)}
			{...props}
		/>
	)
}

function CardHeader({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card-header'
			className={cn(
				'@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-[data-slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6',
				className
			)}
			{...props}
		/>
	)
}

function CardTitle({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card-title'
			className={cn('leading-none font-semibold', className)}
			{...props}
		/>
	)
}

function CardDescription({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card-description'
			className={cn('text-muted-foreground text-sm', className)}
			{...props}
		/>
	)
}

function CardAction({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card-action'
			className={cn(
				'col-start-2 row-span-2 row-start-1 self-start justify-self-end',
				className
			)}
			{...props}
		/>
	)
}

function CardContent({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card-content'
			className={cn('px-6', className)}
			{...props}
		/>
	)
}

function CardFooter({ className, ...props }: React.ComponentProps<'div'>) {
	return (
		<div
			data-slot='card-footer'
			className={cn('flex items-center px-6 [.border-t]:pt-6', className)}
			{...props}
		/>
	)
}

export {
	Card,
	CardHeader,
	CardFooter,
	CardTitle,
	CardAction,
	CardDescription,
	CardContent,
}

----
src/components/ui/button.tsx
import { cn } from '@/lib/utils'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import * as React from 'react'

const buttonVariants = cva(
	"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
	{
		defaultVariants: {
			size: 'default',
			variant: 'default',
		},
		variants: {
			size: {
				default: 'h-9 px-4 py-2 has-[>svg]:px-3',
				icon: 'size-9',
				lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
				sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
			},
			variant: {
				default:
					'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
				destructive:
					'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
				ghost:
					'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
				link: 'text-primary underline-offset-4 hover:underline',
				outline:
					'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
				secondary:
					'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
			},
		},
	}
)

function Button({
	asChild = false,
	className,
	size,
	variant,
	...props
}: React.ComponentProps<'button'> &
	VariantProps<typeof buttonVariants> & {
		asChild?: boolean
	}) {
	const Comp = asChild ? Slot : 'button'

	return (
		<Comp
			data-slot='button'
			className={cn(buttonVariants({ className, size, variant }))}
			{...props}
		/>
	)
}

export { Button, buttonVariants }

----
src/components/ui/avatar.tsx
'use client'

import { cn } from '@/lib/utils'
import * as AvatarPrimitive from '@radix-ui/react-avatar'
import * as React from 'react'

function Avatar({
	className,
	...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
	return (
		<AvatarPrimitive.Root
			data-slot='avatar'
			className={cn(
				'relative flex size-8 shrink-0 overflow-hidden rounded-full',
				className
			)}
			{...props}
		/>
	)
}

function AvatarImage({
	className,
	...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
	return (
		<AvatarPrimitive.Image
			data-slot='avatar-image'
			className={cn('aspect-square size-full', className)}
			{...props}
		/>
	)
}

function AvatarFallback({
	className,
	...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
	return (
		<AvatarPrimitive.Fallback
			data-slot='avatar-fallback'
			className={cn(
				'bg-muted flex size-full items-center justify-center rounded-full',
				className
			)}
			{...props}
		/>
	)
}

export { Avatar, AvatarImage, AvatarFallback }

----
src/components/magicui/confetti.tsx
'use client'

import type {
	GlobalOptions as ConfettiGlobalOptions,
	CreateTypes as ConfettiInstance,
	Options as ConfettiOptions,
} from 'canvas-confetti'
import type { ReactNode } from 'react'

import { Button, ButtonProps } from '@/components/ui/button'
import confetti from 'canvas-confetti'
import React, {
	createContext,
	forwardRef,
	useCallback,
	useEffect,
	useImperativeHandle,
	useMemo,
	useRef,
} from 'react'

type Api = {
	fire: (options?: ConfettiOptions) => void
}

type Props = React.ComponentPropsWithRef<'canvas'> & {
	options?: ConfettiOptions
	globalOptions?: ConfettiGlobalOptions
	manualstart?: boolean
	children?: ReactNode
}

export type ConfettiRef = Api | null

const ConfettiContext = createContext<Api>({} as Api)

// Define component first
const ConfettiComponent = forwardRef<ConfettiRef, Props>((props, ref) => {
	const {
		children,
		globalOptions = { resize: true, useWorker: true },
		manualstart = false,
		options,
		...rest
	} = props
	const instanceRef = useRef<ConfettiInstance | null>(null)

	const canvasRef = useCallback(
		(node: HTMLCanvasElement) => {
			if (node !== null) {
				if (instanceRef.current) return
				instanceRef.current = confetti.create(node, {
					...globalOptions,
					resize: true,
				})
			} else {
				if (instanceRef.current) {
					instanceRef.current.reset()
					instanceRef.current = null
				}
			}
		},
		[globalOptions]
	)

	const fire = useCallback(
		async (opts = {}) => {
			try {
				await instanceRef.current?.({ ...options, ...opts })
			} catch (error) {
				console.error('Confetti error:', error)
			}
		},
		[options]
	)

	const api = useMemo(
		() => ({
			fire,
		}),
		[fire]
	)

	useImperativeHandle(ref, () => api, [api])

	useEffect(() => {
		if (!manualstart) {
			;(async () => {
				try {
					await fire()
				} catch (error) {
					console.error('Confetti effect error:', error)
				}
			})()
		}
	}, [manualstart, fire])

	return (
		<ConfettiContext.Provider value={api}>
			<canvas ref={canvasRef} {...rest} />
			{children}
		</ConfettiContext.Provider>
	)
})

// Set display name immediately
ConfettiComponent.displayName = 'Confetti'

// Export as Confetti
export const Confetti = ConfettiComponent

interface ConfettiButtonProps extends ButtonProps {
	options?: ConfettiOptions &
		ConfettiGlobalOptions & { canvas?: HTMLCanvasElement }
	children?: React.ReactNode
}

const ConfettiButtonComponent = ({
	children,
	options,
	...props
}: ConfettiButtonProps) => {
	const handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {
		try {
			const rect = event.currentTarget.getBoundingClientRect()
			const x = rect.left + rect.width / 2
			const y = rect.top + rect.height / 2
			await confetti({
				...options,
				origin: {
					x: x / window.innerWidth,
					y: y / window.innerHeight,
				},
			})
		} catch (error) {
			console.error('Confetti button error:', error)
		}
	}

	return (
		<Button onClick={handleClick} {...props}>
			{children}
		</Button>
	)
}

ConfettiButtonComponent.displayName = 'ConfettiButton'

export const ConfettiButton = ConfettiButtonComponent

----
src/components/app/top-bar.tsx
'use client'
import { SignedIn } from '@clerk/nextjs'
import { Search } from 'lucide-react'
import { usePathname } from 'next/navigation'

export function TopBar() {
	const pathname = usePathname()

	// Function to generate page title based on pathname
	const getPageTitle = () => {
		if (pathname === '/app') return 'Dashboard'

		const paths = pathname?.split('/').filter(Boolean) || []
		if (paths.length === 0) return 'Dashboard'

		const lastPath = paths[paths.length - 1]
		return lastPath.charAt(0).toUpperCase() + lastPath.slice(1)
	}

	const pageTitle = getPageTitle()

	return (
		<header className='relative flex h-16 w-full shrink-0 items-center justify-between bg-[#0f2942] px-6 text-white'>
			<div className='flex flex-1 items-center gap-2'>
				<div className='rounded-lg bg-white/95 px-4 py-2 text-gray-800 shadow-sm'>
					<h1 className='text-sm italic'>{pageTitle}</h1>
				</div>
			</div>
			<div className='relative w-64'>
				<SignedIn>
					<Search className='absolute top-1/2 left-2 h-4 w-4 -translate-y-1/2 text-gray-400' />
					<input
						placeholder='Rechercher...'
						className='focus:ring-primary h-9 w-full rounded-md border-white/20 bg-white/10 pl-8 text-white placeholder:text-white/50 focus:ring-2 focus:outline-none'
					/>
				</SignedIn>
			</div>
		</header>
	)
}

----
src/components/app/container.tsx
import { clsx } from 'clsx'

export function Container({
	children,
	isAlternative = false,
}: {
	children: React.ReactNode
	isAlternative?: boolean
}) {
	return (
		<div
			className={clsx(
				'flex min-h-[calc(100vh-8rem)] flex-col items-center justify-center bg-gray-50',
				isAlternative && 'items-start justify-start'
			)}
		>
			<div
				className={clsx('', isAlternative ? 'max-w-none' : 'mx-auto max-w-7xl')}
			>
				{children}
			</div>
		</div>
	)
}

----
src/components/app/app-sidebar.tsx
'use client'
import {
	Sidebar,
	SidebarContent,
	SidebarFooter,
	SidebarMenu,
	SidebarMenuItem,
	SidebarMenuButton,
} from '@/components/ui/sidebar'
import {
	Tooltip,
	TooltipContent,
	TooltipTrigger,
} from '@/components/ui/tooltip'
import {
	RedirectToSignIn,
	SignedIn,
	SignedOut,
	UserButton,
} from '@clerk/nextjs'
import {
	Construction,
	Wrench,
	User,
	HardHat,
	Scan,
	ClipboardList,
	Building,
} from 'lucide-react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'

export function AppSidebar() {
	const pathname = usePathname()

	return (
		<Sidebar
			className='fixed top-0 left-0 z-50 h-screen w-20 flex-shrink-0 border-r-0 bg-[#0f2942]'
			collapsible='none'
		>
			<div className='flex h-16 items-center justify-center border-b-0 px-0'>
				<Tooltip>
					<TooltipTrigger asChild>
						<Link
							href='/app'
							className='flex h-full w-full items-center justify-center'
						>
							<div className='text-primary relative flex h-10 w-10 items-center justify-center rounded-md bg-white'>
								<HardHat className='h-5 w-5' />
							</div>
						</Link>
					</TooltipTrigger>
					<TooltipContent side='right'>Accueil</TooltipContent>
				</Tooltip>
			</div>
			<SidebarContent className='px-1 pt-6'>
				<SidebarMenu className='w-full space-y-4'>
					<SignedIn>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										isActive={pathname?.startsWith('/app/equipments')}
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:border-white/20 hover:bg-white hover:text-[#0f2942]'
									>
										<Link
											href='/app/equipments'
											className='flex h-full items-center justify-center'
										>
											<Wrench className='h-8 w-8' />
										</Link>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Équipements</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										isActive={pathname?.startsWith('/app/projects')}
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:border-white/20 hover:bg-white hover:text-[#0f2942]'
									>
										<Link
											href='/app/projects'
											className='flex h-full items-center justify-center'
										>
											<Construction className='h-8 w-8' />
										</Link>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Projets</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										isActive={pathname?.startsWith('/app/users')}
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:border-white/20 hover:bg-white hover:text-[#0f2942]'
									>
										<Link
											href='/app/users'
											className='flex h-full items-center justify-center'
										>
											<User className='h-8 w-8' />
										</Link>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Utilisateurs</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										isActive={pathname?.startsWith('/app/scan')}
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:border-white/20 hover:bg-white hover:text-[#0f2942]'
									>
										<Link
											href='/app/scan'
											className='flex h-full items-center justify-center'
										>
											<Scan className='h-8 w-8' />
										</Link>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Scanner</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										isActive={pathname?.startsWith('/app/inventory')}
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:border-white/20 hover:bg-white hover:text-[#0f2942]'
									>
										<Link
											href='/app/inventory'
											className='flex h-full items-center justify-center'
										>
											<ClipboardList className='h-8 w-8' />
										</Link>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Inventaire</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
					</SignedIn>
				</SidebarMenu>
			</SidebarContent>
			<SidebarFooter className='mt-auto px-0 pb-4'>
				<SignedIn>
					<SidebarMenu className='w-full space-y-4'>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										isActive={pathname?.startsWith('/app/organization')}
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:border-white/20 hover:bg-white hover:text-[#0f2942]'
									>
										<Link
											href='/organizations'
											className='flex h-full items-center justify-center'
										>
											<Building className='h-8 w-8' />
										</Link>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Organisation</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
						<SidebarMenuItem className='mx-0 my-2 px-2'>
							<Tooltip>
								<TooltipTrigger asChild>
									<SidebarMenuButton
										asChild
										className='h-16 w-full justify-center rounded-lg border border-transparent py-4 text-white/70 transition-all duration-200 hover:text-[#0f2942]'
									>
										<div className='flex h-full items-center justify-center'>
											<SignedIn>
												<div className='flex h-full items-center justify-center'>
													<UserButton />
												</div>
											</SignedIn>
											<SignedOut>
												<RedirectToSignIn />
											</SignedOut>
										</div>
									</SidebarMenuButton>
								</TooltipTrigger>
								<TooltipContent side='right'>Profil</TooltipContent>
							</Tooltip>
						</SidebarMenuItem>
					</SidebarMenu>
				</SignedIn>
			</SidebarFooter>
		</Sidebar>
	)
}

----
src/app/globals.css
@import 'tailwindcss';

@custom-variant dark (&:is(.dark *));

@theme inline {
	--color-background: var(--background);
	--color-foreground: var(--foreground);
	--font-sans: var(--font-geist-sans);
	--font-mono: var(--font-geist-mono);
	--color-sidebar-ring: var(--sidebar-ring);
	--color-sidebar-border: var(--sidebar-border);
	--color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
	--color-sidebar-accent: var(--sidebar-accent);
	--color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
	--color-sidebar-primary: var(--sidebar-primary);
	--color-sidebar-foreground: var(--sidebar-foreground);
	--color-sidebar: var(--sidebar);
	--color-chart-5: var(--chart-5);
	--color-chart-4: var(--chart-4);
	--color-chart-3: var(--chart-3);
	--color-chart-2: var(--chart-2);
	--color-chart-1: var(--chart-1);
	--color-ring: var(--ring);
	--color-input: var(--input);
	--color-border: var(--border);
	--color-destructive: var(--destructive);
	--color-accent-foreground: var(--accent-foreground);
	--color-accent: var(--accent);
	--color-muted-foreground: var(--muted-foreground);
	--color-muted: var(--muted);
	--color-secondary-foreground: var(--secondary-foreground);
	--color-secondary: var(--secondary);
	--color-primary-foreground: var(--primary-foreground);
	--color-primary: var(--primary);
	--color-popover-foreground: var(--popover-foreground);
	--color-popover: var(--popover);
	--color-card-foreground: var(--card-foreground);
	--color-card: var(--card);
	--radius-sm: calc(var(--radius) - 4px);
	--radius-md: calc(var(--radius) - 2px);
	--radius-lg: var(--radius);
	--radius-xl: calc(var(--radius) + 4px);
}

:root {
	--radius: 0.625rem;
	--background: oklch(1 0 0);
	--foreground: oklch(0.129 0.042 264.695);
	--card: oklch(1 0 0);
	--card-foreground: oklch(0.129 0.042 264.695);
	--popover: oklch(1 0 0);
	--popover-foreground: oklch(0.129 0.042 264.695);
	--primary: oklch(0.208 0.042 265.755);
	--primary-foreground: oklch(0.984 0.003 247.858);
	--secondary: oklch(0.968 0.007 247.896);
	--secondary-foreground: oklch(0.208 0.042 265.755);
	--muted: oklch(0.968 0.007 247.896);
	--muted-foreground: oklch(0.554 0.046 257.417);
	--accent: oklch(0.968 0.007 247.896);
	--accent-foreground: oklch(0.208 0.042 265.755);
	--destructive: oklch(0.577 0.245 27.325);
	--border: oklch(0.929 0.013 255.508);
	--input: oklch(0.929 0.013 255.508);
	--ring: oklch(0.704 0.04 256.788);
	--chart-1: oklch(0.646 0.222 41.116);
	--chart-2: oklch(0.6 0.118 184.704);
	--chart-3: oklch(0.398 0.07 227.392);
	--chart-4: oklch(0.828 0.189 84.429);
	--chart-5: oklch(0.769 0.188 70.08);
	--sidebar: oklch(0.984 0.003 247.858);
	--sidebar-foreground: oklch(0.129 0.042 264.695);
	--sidebar-primary: oklch(0.208 0.042 265.755);
	--sidebar-primary-foreground: oklch(0.984 0.003 247.858);
	--sidebar-accent: oklch(0.968 0.007 247.896);
	--sidebar-accent-foreground: oklch(0.208 0.042 265.755);
	--sidebar-border: oklch(0.929 0.013 255.508);
	--sidebar-ring: oklch(0.704 0.04 256.788);
}

.dark {
	--background: oklch(0.129 0.042 264.695);
	--foreground: oklch(0.984 0.003 247.858);
	--card: oklch(0.208 0.042 265.755);
	--card-foreground: oklch(0.984 0.003 247.858);
	--popover: oklch(0.208 0.042 265.755);
	--popover-foreground: oklch(0.984 0.003 247.858);
	--primary: oklch(0.929 0.013 255.508);
	--primary-foreground: oklch(0.208 0.042 265.755);
	--secondary: oklch(0.279 0.041 260.031);
	--secondary-foreground: oklch(0.984 0.003 247.858);
	--muted: oklch(0.279 0.041 260.031);
	--muted-foreground: oklch(0.704 0.04 256.788);
	--accent: oklch(0.279 0.041 260.031);
	--accent-foreground: oklch(0.984 0.003 247.858);
	--destructive: oklch(0.704 0.191 22.216);
	--border: oklch(1 0 0 / 10%);
	--input: oklch(1 0 0 / 15%);
	--ring: oklch(0.551 0.027 264.364);
	--chart-1: oklch(0.488 0.243 264.376);
	--chart-2: oklch(0.696 0.17 162.48);
	--chart-3: oklch(0.769 0.188 70.08);
	--chart-4: oklch(0.627 0.265 303.9);
	--chart-5: oklch(0.645 0.246 16.439);
	--sidebar: oklch(0.208 0.042 265.755);
	--sidebar-foreground: oklch(0.984 0.003 247.858);
	--sidebar-primary: oklch(0.488 0.243 264.376);
	--sidebar-primary-foreground: oklch(0.984 0.003 247.858);
	--sidebar-accent: oklch(0.279 0.041 260.031);
	--sidebar-accent-foreground: oklch(0.984 0.003 247.858);
	--sidebar-border: oklch(1 0 0 / 10%);
	--sidebar-ring: oklch(0.551 0.027 264.364);
}

@layer base {
	* {
		@apply border-border outline-ring/50;
	}
	body {
		@apply bg-background text-foreground;
	}
}

@keyframes move-x {
	0% {
		transform: translateX(var(--move-x-from));
	}
	100% {
		transform: translateX(var(--move-x-to));
	}
}

----
src/app/actions/services/pocketbase/userService.ts
'use server'

import {
	getPocketBase,
	handlePocketBaseError,
} from '@/app/actions/services/pocketbase/baseService'
import {
	validateCurrentUser,
	validateOrganizationAccess,
	validateResourceAccess,
	createOrganizationFilter,
	ResourceType,
	PermissionLevel,
	SecurityError,
} from '@/app/actions/services/pocketbase/securityUtils'
import { ListOptions, ListResult, User } from '@/types/types_pocketbase'

/**
 * Get a single user by ID with security validation
 */
export async function getUser(id: string): Promise<User> {
	try {
		// Security check - validates user has access to this resource
		await validateResourceAccess(ResourceType.USER, id, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('users').getOne(id)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error // Re-throw security errors
		}
		return handlePocketBaseError(error, 'UserService.getUser')
	}
}

/**
 * Get current authenticated user profile
 */
export async function getCurrentUser(): Promise<User> {
	try {
		// This function automatically validates the current user
		return await validateCurrentUser()
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.getCurrentUser')
	}
}

/**
 * Get a user by Clerk ID - typically used during authentication
 */
export async function getUserByClerkId(clerkId: string): Promise<User> {
	// This is primarily used during authentication flows where
	// standard security checks aren't possible yet.
	// However, requests should still come from server-side code only.
	const pb = await getPocketBase()
	if (!pb) {
		throw new Error('Failed to connect to PocketBase')
	}

	try {
		return await pb.collection('users').getFirstListItem(`clerkId="${clerkId}"`)
	} catch (error) {
		return handlePocketBaseError(error, 'UserService.getUserByClerkId')
	}
}

/**
 * Get users list with pagination and security checks
 */
export async function getUsersList(
	organizationId: string,
	options: ListOptions = {}
): Promise<ListResult<User>> {
	try {
		// Security check - needs at least READ permission
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const {
			filter: additionalFilter,
			page = 1,
			perPage = 30,
			...rest
		} = options

		// Apply organization filter to ensure data isolation
		const filter = createOrganizationFilter(organizationId, additionalFilter)

		return await pb.collection('users').getList(page, perPage, {
			...rest,
			filter,
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.getUsersList')
	}
}

/**
 * Get all users for an organization with security checks
 */
export async function getUsersByOrganization(
	organizationId: string
): Promise<User[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Apply organization filter with the correct field name
		// Since users can belong to multiple organizations, we need to check expand.organizationId
		return await pb.collection('users').getFullList({
			filter: `organizationId.organizationId="${organizationId}"`,
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.getUsersByOrganization')
	}
}

/**
 * Create a new user with security checks
 * This is typically controlled access for admins only
 */
export async function createUser(
	organizationId: string,
	data: Pick<
		Partial<User>,
		| 'name'
		| 'email'
		| 'emailVisibility'
		| 'verified'
		| 'avatar'
		| 'phone'
		| 'role'
		| 'isAdmin'
		| 'canLogin'
		| 'clerkId'
	>
): Promise<User> {
	try {
		// Security check - requires ADMIN permission to create users
		await validateOrganizationAccess(organizationId, PermissionLevel.ADMIN)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Ensure organization ID is set correctly with the proper field name
		return await pb.collection('users').create({
			...data,
			organizationId, // Force the correct organization ID
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.createUser')
	}
}

/**
 * Update a user with security checks
 */
export async function updateUser(
	id: string,
	data: Pick<
		Partial<User>,
		| 'name'
		| 'email'
		| 'emailVisibility'
		| 'verified'
		| 'avatar'
		| 'phone'
		| 'role'
		| 'isAdmin'
		| 'canLogin'
		| 'lastLogin'
		| 'clerkId'
	>
): Promise<User> {
	try {
		// Get current authenticated user
		const currentUser = await validateCurrentUser()

		// Different permission checks based on who is being updated
		if (id !== currentUser.id) {
			// Updating someone else requires ADMIN permission
			await validateResourceAccess(ResourceType.USER, id, PermissionLevel.ADMIN)
		} else {
			// Users can update their own basic info
			// But for role changes, they'd still need admin rights
			if (data.role || data.isAdmin !== undefined) {
				// If trying to change role or admin status, require admin permission
				// Get the user's organization ID - handling possible multiple organizations
				const userOrgs = currentUser.expand?.organizationId

				if (!userOrgs || !Array.isArray(userOrgs) || userOrgs.length === 0) {
					throw new SecurityError('User does not belong to any organization')
				}

				// Use the first organization for permission check
				const primaryOrgId = userOrgs[0].id
				await validateOrganizationAccess(primaryOrgId, PermissionLevel.ADMIN)
			}
		}

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Security: never allow changing certain fields
		const sanitizedData = { ...data }
		// Don't allow org changes or clerk ID changes - use proper type assertion
		delete (sanitizedData as Record<string, unknown>).organizationId
		if (sanitizedData['clerkId']) {
			delete sanitizedData.clerkId
		}

		return await pb.collection('users').update(id, sanitizedData)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.updateUser')
	}
}

/**
 * Delete a user with admin permission check
 */
export async function deleteUser(id: string): Promise<boolean> {
	try {
		// Security check - requires ADMIN permission for user deletion
		await validateResourceAccess(ResourceType.USER, id, PermissionLevel.ADMIN)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		await pb.collection('users').delete(id)
		return true
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.deleteUser')
	}
}

/**
 * Update user's last login time
 * This is typically called during authentication flows
 */
export async function updateUserLastLogin(id: string): Promise<User> {
	try {
		// Since this is called during authentication,
		// we'll just verify the user exists rather than permissions
		const user = await validateCurrentUser(id)

		if (!user) {
			throw new SecurityError('User not found')
		}

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('users').update(id, {
			lastLogin: new Date().toISOString(),
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.updateUserLastLogin')
	}
}

/**
 * Get the count of users in an organization
 */
export async function getUserCount(organizationId: string): Promise<number> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Fixed field name in the filter
		const result = await pb.collection('users').getList(1, 1, {
			filter: `organizationId.organizationId=${organizationId}`,
			skipTotal: false,
		})

		return result.totalItems
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.getUserCount')
	}
}

/**
 * Search for users in the organization
 */
export async function searchUsers(
	organizationId: string,
	query: string
): Promise<User[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Fixed field name in the filter and handle multi-organization relationship
		return await pb.collection('users').getFullList({
			filter: pb.filter(
				'organizationId.organizationId = {:orgId} && (name ~ {:query} || email ~ {:query})',
				{
					orgId: organizationId,
					query,
				}
			),
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'UserService.searchUsers')
	}
}

----
src/app/actions/services/pocketbase/securityUtils.ts
'use server'

import { getPocketBase } from '@/app/actions/services/pocketbase/baseService'
import { User } from '@/types/types_pocketbase'
import { auth } from '@clerk/nextjs/server'

/**
 * User permission levels
 */
export enum PermissionLevel {
	ADMIN = 'admin',
	READ = 'read',
	WRITE = 'write',
}

/**
 * Resource types for permission checks
 */
export enum ResourceType {
	ASSIGNMENT = 'assignment',
	EQUIPMENT = 'equipment',
	ORGANIZATION = 'organization',
	PROJECT = 'project',
	USER = 'user',
}

/**
 * Error thrown when security checks fail
 */
export class SecurityError extends Error {
	constructor(message: string) {
		super(message)
		this.name = 'SecurityError'
	}
}

/**
 * Validates a user ID against the current authenticated user
 * @param userId The user ID to validate
 * @throws {SecurityError} If the user ID is invalid or unauthorized
 */
export async function validateCurrentUser(userId?: string): Promise<User> {
	// Get Clerk auth context
	const { userId: clerkUserId } = await auth()

	if (!clerkUserId) {
		throw new SecurityError('Unauthenticated access')
	}

	const pb = await getPocketBase()
	if (!pb) {
		throw new SecurityError('Database connection error')
	}

	try {
		// Find the user by Clerk ID
		const user = await pb
			.collection('users')
			.getFirstListItem(`clerkId=${clerkUserId}`)

		// If a specific user ID was provided, verify it matches the current user
		if (userId && user.id !== userId) {
			throw new SecurityError('Unauthorized access to user data')
		}

		return user
	} catch (error) {
		console.error('User validation error:', error)
		throw new SecurityError('Failed to validate user')
	}
}

/**
 * Validates organizational access and permissions
 * @param organizationId The organization ID to validate
 * @param permission The required permission level
 * @returns The validated user and organization
 * @throws {SecurityError} If access is unauthorized
 */
export async function validateOrganizationAccess(
	organizationId: string,
	permission: PermissionLevel = PermissionLevel.READ
): Promise<{ user: User; organizationId: string }> {
	// Get authenticated user
	const user = await validateCurrentUser()

	// Check organization membership
	if (user.expand?.organizationId !== organizationId) {
		throw new SecurityError('Unauthorized access to organization data')
	}

	// Check permission level
	if (
		permission === PermissionLevel.ADMIN &&
		!user.isAdmin &&
		user.role !== 'admin'
	) {
		throw new SecurityError('Insufficient permissions for this operation')
	}

	if (
		permission === PermissionLevel.WRITE &&
		!user.isAdmin &&
		user.role !== 'admin' &&
		user.role !== 'manager'
	) {
		throw new SecurityError('Insufficient permissions for this operation')
	}

	return { organizationId, user }
}

/**
 * Validates resource access (equipment, project, assignment)
 * @param resourceType The type of resource
 * @param resourceId The resource ID
 * @param permission The required permission level
 * @returns The validated user and organization ID
 * @throws {SecurityError} If access is unauthorized
 */
export async function validateResourceAccess(
	resourceType: ResourceType,
	resourceId: string,
	permission: PermissionLevel = PermissionLevel.READ
): Promise<{ user: User; organizationId: string }> {
	const pb = await getPocketBase()
	if (!pb) {
		throw new SecurityError('Database connection error')
	}

	try {
		// Fetch the resource to check organization membership
		const resource = await pb.collection(resourceType).getOne(resourceId)

		// Now validate organization access with the required permission
		return validateOrganizationAccess(resource.organization, permission)
	} catch (error) {
		console.error(
			`Resource validation error (${resourceType}/${resourceId}):`,
			error
		)
		throw new SecurityError('Failed to validate resource access')
	}
}

/**
 * Creates a secure organization filter
 * Ensures that all queries include organization-level filtering
 * @param organizationId The organization ID to filter by
 * @param additionalFilter Optional additional filter expression
 * @returns A complete filter string with organization filtering
 */
export function createOrganizationFilter(
	organizationId: string,
	additionalFilter?: string
): string {
	const orgFilter = `organization="${organizationId}"`

	if (!additionalFilter) {
		return orgFilter
	}

	return `${orgFilter} && (${additionalFilter})`
}

----
src/app/actions/services/pocketbase/projectService.ts
'use server'

import {
	getPocketBase,
	handlePocketBaseError,
} from '@/app/actions/services/pocketbase/baseService'
import {
	validateOrganizationAccess,
	validateResourceAccess,
	createOrganizationFilter,
	ResourceType,
	PermissionLevel,
	SecurityError,
} from '@/app/actions/services/pocketbase/securityUtils'
import { ListOptions, ListResult, Project } from '@/types/types_pocketbase'

/**
 * Get a single project by ID with security validation
 */
export async function getProject(id: string): Promise<Project> {
	try {
		// Security check - validates user has access to this resource
		await validateResourceAccess(ResourceType.PROJECT, id, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('projects').getOne(id)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error // Re-throw security errors
		}
		return handlePocketBaseError(error, 'ProjectService.getProject')
	}
}

/**
 * Get projects list with pagination and security checks
 */
export async function getProjectsList(
	organizationId: string,
	options: ListOptions = {}
): Promise<ListResult<Project>> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const {
			filter: additionalFilter,
			page = 1,
			perPage = 30,
			...rest
		} = options

		// Apply organization filter to ensure data isolation
		const filter = createOrganizationFilter(organizationId, additionalFilter)

		return await pb.collection('projects').getList(page, perPage, {
			...rest,
			filter,
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.getProjectsList')
	}
}

/**
 * Get all projects for an organization with security checks
 */
export async function getOrganizationProjects(
	organizationId: string
): Promise<Project[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Apply organization filter - fixed field name
		const filter = `organizationId="${organizationId}"`

		return await pb.collection('projects').getFullList({
			filter,
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'ProjectService.getOrganizationProjects'
		)
	}
}

/**
 * Get active projects with security checks
 * (current date is between startDate and endDate or endDate is not set)
 */
export async function getActiveProjects(
	organizationId: string
): Promise<Project[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const now = new Date().toISOString()

		// Fixed field name in filter
		return await pb.collection('projects').getFullList({
			filter: pb.filter(
				'organizationId = {:orgId} && (startDate <= {:now} && (endDate >= {:now} || endDate = ""))',
				{ now, orgId: organizationId }
			),
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.getActiveProjects')
	}
}

/**
 * Create a new project with security checks
 */
export async function createProject(
	organizationId: string,
	data: Pick<
		Partial<Project>,
		'name' | 'address' | 'notes' | 'startDate' | 'endDate'
	>
): Promise<Project> {
	try {
		// Security check - requires WRITE permission
		await validateOrganizationAccess(organizationId, PermissionLevel.WRITE)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Ensure organization ID is set correctly - fixed field name
		return await pb.collection('projects').create({
			...data,
			organizationId, // Force the correct organization ID
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.createProject')
	}
}

/**
 * Update a project with security checks
 */
export async function updateProject(
	id: string,
	data: Pick<
		Partial<Project>,
		'name' | 'address' | 'notes' | 'startDate' | 'endDate'
	>
): Promise<Project> {
	try {
		// Security check - requires WRITE permission
		await validateResourceAccess(
			ResourceType.PROJECT,
			id,
			PermissionLevel.WRITE
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Never allow changing the organization
		const sanitizedData = { ...data }
		// Fixed 'any' type and field name
		delete (sanitizedData as Record<string, unknown>).organizationId

		return await pb.collection('projects').update(id, sanitizedData)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.updateProject')
	}
}

/**
 * Delete a project with security checks
 */
export async function deleteProject(id: string): Promise<boolean> {
	try {
		// Security check - requires ADMIN permission for deletion
		await validateResourceAccess(
			ResourceType.PROJECT,
			id,
			PermissionLevel.ADMIN
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		await pb.collection('projects').delete(id)
		return true
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.deleteProject')
	}
}

/**
 * Get project count for an organization with security checks
 */
export async function getProjectCount(organizationId: string): Promise<number> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Fixed field name
		const result = await pb.collection('projects').getList(1, 1, {
			filter: `organizationId=${organizationId}`,
			skipTotal: false,
		})

		return result.totalItems
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.getProjectCount')
	}
}

/**
 * Search projects by name or address with security checks
 */
export async function searchProjects(
	organizationId: string,
	query: string
): Promise<Project[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Fixed field name in filter
		return await pb.collection('projects').getFullList({
			filter: pb.filter(
				'organizationId = {:orgId} && (name ~ {:query} || address ~ {:query})',
				{
					orgId: organizationId,
					query,
				}
			),
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'ProjectService.searchProjects')
	}
}

----
src/app/actions/services/pocketbase/organizationService.ts
'use server'

import {
	getPocketBase,
	handlePocketBaseError,
} from '@/app/actions/services/pocketbase/baseService'
import {
	validateCurrentUser,
	validateOrganizationAccess,
	PermissionLevel,
	SecurityError,
} from '@/app/actions/services/pocketbase/securityUtils'
import { Organization, ListOptions, ListResult } from '@/types/types_pocketbase'

/**
 * Get a single organization by ID with security validation
 */
export async function getOrganization(id: string): Promise<Organization> {
	try {
		// Security check - validates user has access to this organization
		await validateOrganizationAccess(id, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('organizations').getOne(id)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error // Re-throw security errors
		}
		return handlePocketBaseError(error, 'OrganizationService.getOrganization')
	}
}

/**
 * Get an organization by Clerk ID with security validation
 * This is primarily used during authentication
 */
export async function getOrganizationByClerkId(
	clerkId: string
): Promise<Organization> {
	try {
		// This endpoint is typically called during authentication
		// We still validate the current user is authenticated
		const user = await validateCurrentUser()

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Fixed the template literal syntax
		const organization = await pb
			.collection('organizations')
			.getFirstListItem(`clerkId=${clerkId}`)

		// After fetching, verify that the user belongs to this organization
		// The user can have multiple organizations, so we need to check if the requested org
		// is in their list of organizations
		if (
			!user.expand?.organizationId ||
			!Array.isArray(user.expand.organizationId)
		) {
			throw new SecurityError('User has no associated organizations')
		}

		// Check if the requested organization is in the user's list of organizations
		const hasAccess = user.expand.organizationId.some(
			org => org.id === organization.id
		)

		if (!hasAccess) {
			throw new SecurityError('User does not belong to this organization')
		}

		// todo: fix type
		return organization
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'OrganizationService.getOrganizationByClerkId'
		)
	}
}

/**
 * Get organizations list with pagination for the current user
 */
export async function getUserOrganizations(): Promise<Organization[]> {
	try {
		const user = await validateCurrentUser()

		// If the user's organizations are already expanded, return them
		if (
			user.expand?.organizationId &&
			Array.isArray(user.expand.organizationId)
		) {
			return user.expand.organizationId
		}

		// Otherwise, we need to fetch them
		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Assuming there's a relation field in the users collection that points to organizations
		// Fetch the user with expanded organizations
		const userWithOrgs = await pb.collection('users').getOne(user.id, {
			expand: 'organizationId',
		})

		if (
			userWithOrgs.expand?.organizationId &&
			Array.isArray(userWithOrgs.expand.organizationId)
		) {
			return userWithOrgs.expand.organizationId
		}

		return []
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'OrganizationService.getUserOrganizations'
		)
	}
}

/**
 * Get organizations list with pagination
 * This should only be accessible to super-admins, so we don't implement it
 * in a regular multi-tenant app
 */
export async function getOrganizationsList(
	options: ListOptions = {}
): Promise<ListResult<Organization>> {
	// This function should be restricted to super-admins only
	throw new SecurityError(
		'This operation is restricted to super administrators'
	)
}

/**
 * Create a new organization
 * This should only be done during onboarding or by super-admins
 */
export async function createOrganization(
	data: Partial<Organization>
): Promise<Organization> {
	// For creating organizations, we typically handle this specially
	// during onboarding with Clerk. This should not be exposed to regular users.
	throw new SecurityError('This operation is restricted')
}

/**
 * Update an organization with security validation
 */
export async function updateOrganization(
	id: string,
	data: Partial<Organization>
): Promise<Organization> {
	try {
		// Security check - requires ADMIN permission for organization updates
		await validateOrganizationAccess(id, PermissionLevel.ADMIN)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Sanitize sensitive fields
		const sanitizedData = { ...data }

		// Never allow changing the clerkId - that's a special binding
		delete sanitizedData.clerkId

		// Don't allow changing Stripe-related fields directly
		// These should only be updated by the Stripe webhook
		delete sanitizedData.stripeCustomerId
		delete sanitizedData.subscriptionId
		delete sanitizedData.subscriptionStatus
		delete sanitizedData.priceId

		return await pb.collection('organizations').update(id, sanitizedData)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'OrganizationService.updateOrganization'
		)
	}
}

/**
 * Delete an organization
 * This should only be accessible to super-admins or during account cancellation flows
 */
export async function deleteOrganization(id: string): Promise<boolean> {
	// This function should be restricted to super-admins only
	// or be part of a special account cancellation flow
	throw new SecurityError('This operation is restricted')
}

/**
 * Update organization subscription details
 * This should only be called from Stripe webhooks, not directly by users
 */
export async function updateSubscription(
	id: string,
	subscriptionData: {
		stripeCustomerId?: string
		subscriptionId?: string
		subscriptionStatus?: string
		priceId?: string
	}
): Promise<Organization> {
	try {
		// This function should verify it's being called from a valid webhook
		// For demo purposes, we'll implement a basic check
		// In production, you'd add a webhook secret validation

		// We'll skip full security checks since this is called from webhooks
		// but we still validate the organization exists

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Verify the organization exists
		const organization = await pb.collection('organizations').getOne(id)
		if (!organization) {
			throw new Error('Organization not found')
		}

		return await pb.collection('organizations').update(id, subscriptionData)
	} catch (error) {
		return handlePocketBaseError(
			error,
			'OrganizationService.updateSubscription'
		)
	}
}

/**
 * Get current organization settings for the authenticated user
 * If the user belongs to multiple organizations, takes the first active one or prompts selection
 */
export async function getCurrentOrganizationSettings(): Promise<Organization> {
	try {
		// Get all organizations for the current user
		const userOrganizations = await getUserOrganizations()

		if (!userOrganizations.length) {
			throw new SecurityError('User does not belong to any organization')
		}

		// For simplicity, we're returning the first organization
		// In a real application, you might want to use the last selected org or prompt for selection
		const firstOrgId = userOrganizations[0].id

		// Fetch full organization details with validated access
		return await getOrganization(firstOrgId)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'OrganizationService.getCurrentOrganizationSettings'
		)
	}
}

/**
 * Check if current user is organization admin for a specific organization
 */
export async function isCurrentUserOrgAdmin(
	organizationId: string
): Promise<boolean> {
	try {
		// Get current user
		const user = await validateCurrentUser()

		// Check if user has admin role
		const isAdmin = user.isAdmin || user.role === 'admin'

		// If they're not an admin by role, we need to check if they're an admin of this specific org
		if (!isAdmin) {
			// This would need additional checks in a real application
			// For example, checking a userOrganizationRole table
			return false
		}

		// Verify they belong to this organization
		const userOrgs = await getUserOrganizations()
		const belongsToOrg = userOrgs.some(org => org.id === organizationId)

		return isAdmin && belongsToOrg
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return false
	}
}

----
src/app/actions/services/pocketbase/equipmentService.ts
'use server'

import {
	getPocketBase,
	handlePocketBaseError,
} from '@/app/actions/services/pocketbase/baseService'
import {
	validateOrganizationAccess,
	validateResourceAccess,
	createOrganizationFilter,
	ResourceType,
	PermissionLevel,
	SecurityError,
} from '@/app/actions/services/pocketbase/securityUtils'
import { Equipment, ListOptions, ListResult } from '@/types/types_pocketbase'

/**
 * Get a single equipment item by ID with security validation
 */
export async function getEquipment(id: string): Promise<Equipment> {
	try {
		// Security check - validates user has access to this resource
		await validateResourceAccess(
			ResourceType.EQUIPMENT,
			id,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('equipment').getOne(id)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error // Re-throw security errors
		}
		return handlePocketBaseError(error, 'EquipmentService.getEquipment')
	}
}

/**
 * Get equipment by QR/NFC code with organization validation
 */
export async function getEquipmentByCode(
	organizationId: string,
	qrNfcCode: string
): Promise<Equipment> {
	try {
		// Security check - validates user belongs to this organization
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Apply organization filter for security
		const filter = createOrganizationFilter(
			organizationId,
			`qrNfcCode="${qrNfcCode}"`
		)
		return await pb.collection('equipment').getFirstListItem(filter)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.getEquipmentByCode')
	}
}

/**
 * Get equipment list with pagination and security checks
 */
export async function getEquipmentList(
	organizationId: string,
	options: ListOptions = {}
): Promise<ListResult<Equipment>> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const {
			filter: additionalFilter,
			page = 1,
			perPage = 30,
			...rest
		} = options

		// Apply organization filter to ensure data isolation
		const filter = createOrganizationFilter(organizationId, additionalFilter)

		return await pb.collection('equipment').getList(page, perPage, {
			...rest,
			filter,
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.getEquipmentList')
	}
}

/**
 * Get all equipment for an organization with security check
 */
export async function getOrganizationEquipment(
	organizationId: string
): Promise<Equipment[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Apply organization filter - fixed field name to match interface
		const filter = `organizationId=${organizationId}`

		return await pb.collection('equipment').getFullList({
			filter,
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'EquipmentService.getOrganizationEquipment'
		)
	}
}

/**
 * Create a new equipment item with permission check
 */
export async function createEquipment(
	organizationId: string,
	data: Pick<
		Partial<Equipment>,
		| 'name'
		| 'qrNfcCode'
		| 'tags'
		| 'notes'
		| 'acquisitionDate'
		| 'parentEquipmentId'
	>
): Promise<Equipment> {
	try {
		// Security check - requires WRITE permission - removed unused user variable
		await validateOrganizationAccess(organizationId, PermissionLevel.WRITE)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Ensure organization ID is set and matches the authenticated user's org
		// Fixed field name to match interface
		return await pb.collection('equipment').create({
			...data,
			organizationId, // Force the correct organization ID
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.createEquipment')
	}
}

/**
 * Update an equipment item with permission and ownership checks
 */
export async function updateEquipment(
	id: string,
	data: Pick<
		Partial<Equipment>,
		| 'name'
		| 'qrNfcCode'
		| 'tags'
		| 'notes'
		| 'acquisitionDate'
		| 'parentEquipmentId'
	>
): Promise<Equipment> {
	try {
		// Security check - validates organization and requires WRITE permission
		await validateResourceAccess(
			ResourceType.EQUIPMENT,
			id,
			PermissionLevel.WRITE
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Never allow changing the organization
		const sanitizedData = { ...data }
		// Fixed 'any' type and field name
		delete (sanitizedData as Record<string, unknown>).organizationId

		return await pb.collection('equipment').update(id, sanitizedData)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.updateEquipment')
	}
}

/**
 * Delete an equipment item with permission check
 */
export async function deleteEquipment(id: string): Promise<boolean> {
	try {
		// Security check - requires ADMIN permission for deletion
		await validateResourceAccess(
			ResourceType.EQUIPMENT,
			id,
			PermissionLevel.ADMIN
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		await pb.collection('equipment').delete(id)
		return true
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.deleteEquipment')
	}
}

/**
 * Get child equipment (items that have this equipment as parent)
 */
export async function getChildEquipment(
	parentId: string
): Promise<Equipment[]> {
	try {
		// Security check - validates parent equipment access
		const { organizationId } = await validateResourceAccess(
			ResourceType.EQUIPMENT,
			parentId,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Apply organization filter for security - fixed field name
		const filter = createOrganizationFilter(
			organizationId,
			`parentEquipmentId="${parentId}"`
		)

		return await pb.collection('equipment').getFullList({
			filter,
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.getChildEquipment')
	}
}

/**
 * Generate a unique QR/NFC code
 */
export async function generateUniqueCode(): Promise<string> {
	// Generate a random alphanumeric code
	const prefix = 'EQ'
	const randomPart = Math.random().toString(36).substring(2, 10).toUpperCase()
	return `${prefix}-${randomPart}`
}

/**
 * Get equipment count for an organization
 */
export async function getEquipmentCount(
	organizationId: string
): Promise<number> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const result = await pb.collection('equipment').getList(1, 1, {
			filter: `organizationId="${organizationId}"`, // Fixed field name
			skipTotal: false,
		})
		return result.totalItems
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.getEquipmentCount')
	}
}

/**
 * Search equipment by name or tag within organization
 */
export async function searchEquipment(
	organizationId: string,
	query: string
): Promise<Equipment[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('equipment').getFullList({
			filter: pb.filter(
				'organizationId = {:orgId} && (name ~ {:query} || tags ~ {:query} || qrNfcCode = {:query})',
				{
					orgId: organizationId,
					query,
				}
			),
			sort: 'name',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'EquipmentService.searchEquipment')
	}
}

----
src/app/actions/services/pocketbase/baseService.ts
import 'server-only'
import PocketBase from 'pocketbase'

// Singleton pattern for PocketBase instance
let instance: PocketBase | null = null

/**
 * Initialize and authenticate with PocketBase
 * Uses server-side authentication with an admin token
 *
 * @returns {Promise<PocketBase | null>} Authenticated PocketBase instance or null if authentication fails
 */
export const getPocketBase = async (): Promise<PocketBase | null> => {
	// Return existing instance if valid
	if (instance?.authStore?.isValid) {
		return instance
	}

	// Get credentials from environment variables
	const token = process.env.PB_USER_TOKEN
	const url = process.env.PB_SERVER_URL

	if (!token || !url) {
		console.error('Missing PocketBase credentials in environment variables')
		return null
	}

	// Create new PocketBase instance
	instance = new PocketBase(url)
	instance.authStore.save(token, null)
	instance.autoCancellation(false)

	return instance
}

/**
 * Error handler for PocketBase operations
 * @param error The caught error
 * @param context Optional context information for better error reporting
 */
export const handlePocketBaseError = (
	error: unknown,
	context?: string
): never => {
	const contextMsg = context ? ` [${context}]` : ''
	console.error(`PocketBase error${contextMsg}:`, error)

	if (error instanceof Error) {
		throw new Error(
			`PocketBase operation failed${contextMsg}: ${error.message}`
		)
	}

	throw new Error(`Unknown PocketBase error${contextMsg}`)
}

----
src/app/actions/services/pocketbase/assignmentService.ts
'use server'

import {
	getPocketBase,
	handlePocketBaseError,
} from '@/app/actions/services/pocketbase/baseService'
import {
	validateOrganizationAccess,
	validateResourceAccess,
	createOrganizationFilter,
	ResourceType,
	PermissionLevel,
	SecurityError,
} from '@/app/actions/services/pocketbase/securityUtils'
import { Assignment, ListOptions, ListResult } from '@/types/types_pocketbase'

/**
 * Get a single assignment by ID with security validation
 */
export async function getAssignment(id: string): Promise<Assignment> {
	try {
		// Security check - validates user has access to this resource
		await validateResourceAccess(
			ResourceType.ASSIGNMENT,
			id,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('assignments').getOne(id)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error // Re-throw security errors
		}
		return handlePocketBaseError(error, 'AssignmentService.getAssignment')
	}
}

/**
 * Get assignments list with pagination and security checks
 */
export async function getAssignmentsList(
	organizationId: string,
	options: ListOptions = {}
): Promise<ListResult<Assignment>> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const {
			filter: additionalFilter,
			page = 1,
			perPage = 30,
			...rest
		} = options

		// Apply organization filter to ensure data isolation
		const filter = createOrganizationFilter(organizationId, additionalFilter)

		return await pb.collection('assignments').getList(page, perPage, {
			...rest,
			filter,
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'AssignmentService.getAssignmentsList')
	}
}

/**
 * Get active assignments for an organization with security checks
 * Active assignments have startDate ≤ current date and no endDate or endDate ≥ current date
 */
export async function getActiveAssignments(
	organizationId: string
): Promise<Assignment[]> {
	try {
		// Security check
		await validateOrganizationAccess(organizationId, PermissionLevel.READ)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const now = new Date().toISOString()

		return await pb.collection('assignments').getFullList({
			expand: 'equipmentId,assignedToUserId,assignedToProjectId',
			filter: pb.filter(
				'organizationId = {:orgId} && startDate <= {:now} && (endDate = "" || endDate >= {:now})',
				{ now, orgId: organizationId }
			),
			sort: '-created',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'AssignmentService.getActiveAssignments'
		)
	}
}

/**
 * Get current assignment for a specific equipment with security checks
 */
export async function getCurrentEquipmentAssignment(
	equipmentId: string
): Promise<Assignment | null> {
	try {
		// Security check - validates access to the equipment
		const { organizationId } = await validateResourceAccess(
			ResourceType.EQUIPMENT,
			equipmentId,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		const now = new Date().toISOString()

		// Include organization check for extra security
		const assignments = await pb.collection('assignments').getList(1, 1, {
			expand: 'equipmentId,assignedToUserId,assignedToProjectId',
			filter: pb.filter(
				'organizationId = {:orgId} && equipmentId = {:equipId} && startDate <= {:now} && (endDate = "" || endDate >= {:now})',
				{ equipId: equipmentId, now, orgId: organizationId }
			),
			sort: '-created',
		})

		return assignments.items.length > 0
			? (assignments.items[0] as Assignment)
			: null
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'AssignmentService.getCurrentEquipmentAssignment'
		)
	}
}

/**
 * Get assignments for a user with security checks
 */
export async function getUserAssignments(
	userId: string
): Promise<Assignment[]> {
	try {
		// Security check - validates access to the user
		const { organizationId } = await validateResourceAccess(
			ResourceType.USER,
			userId,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Include organization filter for security
		return await pb.collection('assignments').getFullList({
			expand: 'equipmentId,assignedToProjectId',
			filter: createOrganizationFilter(
				organizationId,
				`assignedToUserId="${userId}"`
			),
			sort: '-created',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'AssignmentService.getUserAssignments')
	}
}

/**
 * Get assignments for a project with security checks
 */
export async function getProjectAssignments(
	projectId: string
): Promise<Assignment[]> {
	try {
		// Security check - validates access to the project
		const { organizationId } = await validateResourceAccess(
			ResourceType.PROJECT,
			projectId,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Include organization filter for security
		return await pb.collection('assignments').getFullList({
			expand: 'equipmentId,assignedToUserId',
			filter: createOrganizationFilter(
				organizationId,
				`assignedToProjectId=${projectId}`
			),
			sort: '-created',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'AssignmentService.getProjectAssignments'
		)
	}
}

/**
 * Create a new assignment with security checks
 */
export async function createAssignment(
	organizationId: string,
	data: Pick<
		Partial<Assignment>,
		| 'equipmentId'
		| 'assignedToUserId'
		| 'assignedToProjectId'
		| 'startDate'
		| 'endDate'
		| 'notes'
	>
): Promise<Assignment> {
	try {
		// Security check - requires WRITE permission
		await validateOrganizationAccess(organizationId, PermissionLevel.WRITE)

		// If equipment is provided, verify access to it
		if (data.equipmentId) {
			await validateResourceAccess(
				ResourceType.EQUIPMENT,
				data.equipmentId,
				PermissionLevel.READ
			)
		}

		// If assignedToUser is provided, verify access to that user
		if (data.assignedToUserId) {
			await validateResourceAccess(
				ResourceType.USER,
				data.assignedToUserId,
				PermissionLevel.READ
			)
		}

		// If assignedToProject is provided, verify access to that project
		if (data.assignedToProjectId) {
			await validateResourceAccess(
				ResourceType.PROJECT,
				data.assignedToProjectId,
				PermissionLevel.READ
			)
		}

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Ensure organization ID is set correctly
		return await pb.collection('assignments').create({
			...data,
			organizationId, // Force the correct organization ID
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'AssignmentService.createAssignment')
	}
}

/**
 * Update an assignment with security checks
 */
export async function updateAssignment(
	id: string,
	data: Pick<
		Partial<Assignment>,
		| 'equipmentId'
		| 'assignedToUserId'
		| 'assignedToProjectId'
		| 'startDate'
		| 'endDate'
		| 'notes'
	>
): Promise<Assignment> {
	try {
		// Security check - requires WRITE permission for the assignment
		await validateResourceAccess(
			ResourceType.ASSIGNMENT,
			id,
			PermissionLevel.WRITE
		)

		// Additional validations for related resources
		if (data.equipmentId) {
			await validateResourceAccess(
				ResourceType.EQUIPMENT,
				data.equipmentId,
				PermissionLevel.READ
			)
		}

		if (data.assignedToUserId) {
			await validateResourceAccess(
				ResourceType.USER,
				data.assignedToUserId,
				PermissionLevel.READ
			)
		}

		if (data.assignedToProjectId) {
			await validateResourceAccess(
				ResourceType.PROJECT,
				data.assignedToProjectId,
				PermissionLevel.READ
			)
		}

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Never allow changing the organization
		const sanitizedData = { ...data }
		// Use type assertion with more specific type
		delete (sanitizedData as Record<string, unknown>).organizationId

		return await pb.collection('assignments').update(id, sanitizedData)
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'AssignmentService.updateAssignment')
	}
}

/**
 * Delete an assignment with security checks
 */
export async function deleteAssignment(id: string): Promise<boolean> {
	try {
		// Security check - requires WRITE permission
		await validateResourceAccess(
			ResourceType.ASSIGNMENT,
			id,
			PermissionLevel.WRITE
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		await pb.collection('assignments').delete(id)
		return true
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'AssignmentService.deleteAssignment')
	}
}

/**
 * Complete an assignment by setting its end date to now with security checks
 */
export async function completeAssignment(id: string): Promise<Assignment> {
	try {
		// Security check - requires WRITE permission
		await validateResourceAccess(
			ResourceType.ASSIGNMENT,
			id,
			PermissionLevel.WRITE
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		return await pb.collection('assignments').update(id, {
			endDate: new Date().toISOString(),
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(error, 'AssignmentService.completeAssignment')
	}
}

/**
 * Get assignment history for an equipment with security checks
 */
export async function getEquipmentAssignmentHistory(
	equipmentId: string
): Promise<Assignment[]> {
	try {
		// Security check - validates access to the equipment
		const { organizationId } = await validateResourceAccess(
			ResourceType.EQUIPMENT,
			equipmentId,
			PermissionLevel.READ
		)

		const pb = await getPocketBase()
		if (!pb) {
			throw new Error('Failed to connect to PocketBase')
		}

		// Include organization filter for security
		return await pb.collection('assignments').getFullList({
			expand: 'assignedToUserId,assignedToProjectId',
			filter: createOrganizationFilter(
				organizationId,
				`equipmentId="${equipmentId}"`
			),
			sort: '-startDate',
		})
	} catch (error) {
		if (error instanceof SecurityError) {
			throw error
		}
		return handlePocketBaseError(
			error,
			'AssignmentService.getEquipmentAssignmentHistory'
		)
	}
}

----
src/app/actions/equipment/manageEquipments.ts
'use server'

import {
	createEquipment,
	updateEquipment,
	deleteEquipment,
	generateUniqueCode,
} from '@/app/actions/services/pocketbase/equipmentService'
import { SecurityError } from '@/app/actions/services/pocketbase/securityUtils'
import { Equipment } from '@/types/types_pocketbase'
import { revalidatePath } from 'next/cache'
import { z } from 'zod'

// Define validation schema for equipment data
const equipmentSchema = z.object({
	acquisitionDate: z.string().optional(),
	name: z.string().min(2, 'Name must be at least 2 characters'),
	notes: z.string().optional(),
	parentEquipment: z.string().optional(),
	tags: z.array(z.string()).optional(),
})

type EquipmentFormData = z.infer<typeof equipmentSchema>

/**
 * Result type for all equipment actions
 */
export type EquipmentActionResult = {
	success: boolean
	message?: string
	data?: Equipment
	validationErrors?: Record<string, string>
}

/**
 * Convert tags array to string for PocketBase storage
 */
function convertTagsForStorage(tags?: string[]): string | null {
	if (!tags || tags.length === 0) return null
	return JSON.stringify(tags)
}

/**
 * Create a new equipment item
 */
export async function createEquipmentAction(
	organizationId: string,
	formData: EquipmentFormData
): Promise<EquipmentActionResult> {
	try {
		// Validate input data
		const validatedData = equipmentSchema.parse(formData)

		// Generate unique code for the equipment
		const qrNfcCode = await generateUniqueCode()

		// Create the equipment with security checks built into the service
		const newEquipment = await createEquipment(organizationId, {
			acquisitionDate: validatedData.acquisitionDate || null,
			name: validatedData.name,
			notes: validatedData.notes || null,
			parentEquipmentId: validatedData.parentEquipment || null,
			qrNfcCode,
			tags: convertTagsForStorage(validatedData.tags),
		})

		// Revalidate relevant paths to refresh data
		revalidatePath('/dashboard/equipment')

		return {
			data: newEquipment,
			message: 'Equipment created successfully',
			success: true,
		}
	} catch (error) {
		// Handle validation errors
		if (error instanceof z.ZodError) {
			const validationErrors = error.errors.reduce(
				(acc, curr) => {
					const key = curr.path.join('.')
					acc[key] = curr.message
					return acc
				},
				{} as Record<string, string>
			)

			return {
				message: 'Validation failed',
				success: false,
				validationErrors,
			}
		}

		// Handle security errors
		if (error instanceof SecurityError) {
			return {
				message: error.message,
				success: false,
			}
		}

		// Handle other errors
		console.error('Error creating equipment:', error)
		return {
			message:
				error instanceof Error ? error.message : 'An unknown error occurred',
			success: false,
		}
	}
}

/**
 * Update an existing equipment item
 */
export async function updateEquipmentAction(
	equipmentId: string,
	formData: EquipmentFormData
): Promise<EquipmentActionResult> {
	try {
		// Validate input data
		const validatedData = equipmentSchema.parse(formData)

		// Update the equipment with security checks built into the service
		const updatedEquipment = await updateEquipment(equipmentId, {
			acquisitionDate: validatedData.acquisitionDate || null,
			name: validatedData.name,
			notes: validatedData.notes || null,
			parentEquipmentId: validatedData.parentEquipment || null,
			tags: convertTagsForStorage(validatedData.tags),
		})

		// Revalidate relevant paths to refresh data
		revalidatePath('/dashboard/equipment')
		revalidatePath(`/dashboard/equipment/${equipmentId}`)

		return {
			data: updatedEquipment,
			message: 'Equipment updated successfully',
			success: true,
		}
	} catch (error) {
		// Handle validation errors
		if (error instanceof z.ZodError) {
			const validationErrors = error.errors.reduce(
				(acc, curr) => {
					const key = curr.path.join('.')
					acc[key] = curr.message
					return acc
				},
				{} as Record<string, string>
			)

			return {
				message: 'Validation failed',
				success: false,
				validationErrors,
			}
		}

		// Handle security errors
		if (error instanceof SecurityError) {
			return {
				message: error.message,
				success: false,
			}
		}

		// Handle other errors
		console.error('Error updating equipment:', error)
		return {
			message:
				error instanceof Error ? error.message : 'An unknown error occurred',
			success: false,
		}
	}
}

/**
 * Delete an equipment item
 */
export async function deleteEquipmentAction(
	equipmentId: string
): Promise<EquipmentActionResult> {
	try {
		// Delete the equipment with security checks built into the service
		await deleteEquipment(equipmentId)

		// Revalidate relevant paths to refresh data
		revalidatePath('/dashboard/equipment')

		return {
			message: 'Equipment deleted successfully',
			success: true,
		}
	} catch (error) {
		// Handle security errors
		if (error instanceof SecurityError) {
			return {
				message: error.message,
				success: false,
			}
		}

		// Handle other errors
		console.error('Error deleting equipment:', error)
		return {
			message:
				error instanceof Error ? error.message : 'An unknown error occurred',
			success: false,
		}
	}
}

----
src/app/(application)/app/page.tsx
import { CardDescription, CardTitle } from '@/components/ui/card'
import SpotlightCard from '@/components/ui/spotlight-card'
import { auth, currentUser } from '@clerk/nextjs/server'
import {
	Construction,
	Wrench,
	User,
	Building,
	Scan,
	ClipboardList,
} from 'lucide-react'
import Link from 'next/link'
import { redirect } from 'next/navigation'

export default async function Dashboard() {
	const { orgId, userId } = await auth()

	if (!userId || !orgId) {
		redirect('/onboarding')
	}

	const user = await currentUser()

	const quickLinks = [
		{
			bgColor: 'bg-blue-100',
			color: 'text-blue-600',
			description: 'Gérer et suivre tous les équipements et outils',
			href: '/app/equipments',
			icon: Wrench,
			spotlightColor:
				'rgba(59, 130, 246, 0.25)' as `rgba(${number}, ${number}, ${number}, ${number})`,
			title: 'Équipements',
		},
		{
			bgColor: 'bg-amber-100',
			color: 'text-amber-600',
			description: 'Gérer les projets, chantiers et emplacements',
			href: '/app/projects',
			icon: Construction,
			spotlightColor:
				'rgba(245, 158, 11, 0.25)' as `rgba(${number}, ${number}, ${number}, ${number})`,
			title: 'Projets',
		},
		{
			bgColor: 'bg-green-100',
			color: 'text-green-600',
			description: 'Gérer les utilisateurs et permissions',
			href: '/app/users',
			icon: User,
			spotlightColor:
				'rgba(34, 197, 94, 0.25)' as `rgba(${number}, ${number}, ${number}, ${number})`,
			title: 'Utilisateurs',
		},
		{
			bgColor: 'bg-purple-100',
			color: 'text-purple-600',
			description: 'Scanner et localiser des équipements',
			href: '/app/scan',
			icon: Scan,
			spotlightColor:
				'rgba(168, 85, 247, 0.25)' as `rgba(${number}, ${number}, ${number}, ${number})`,
			title: 'Scanner',
		},
		{
			bgColor: 'bg-red-100',
			color: 'text-red-600',
			description: 'Rapports et inventaire complet',
			href: '/app/inventory',
			icon: ClipboardList,
			spotlightColor:
				'rgba(239, 68, 68, 0.25)' as `rgba(${number}, ${number}, ${number}, ${number})`,
			title: 'Inventaire',
		},
		{
			bgColor: 'bg-indigo-100',
			color: 'text-indigo-600',
			description: 'Paramètres et configuration',
			href: '/organizations',
			icon: Building,
			spotlightColor:
				'rgba(99, 102, 241, 0.25)' as `rgba(${number}, ${number}, ${number}, ${number})`,
			title: 'Organisation',
		},
	]

	return (
		<div className='w-full'>
			<h2 className='mb-4 text-2xl font-semibold text-gray-800'>
				Bonjour {user?.firstName} !
			</h2>
			<div className='grid w-full grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-3'>
				{quickLinks.map(link => (
					<Link href={link.href} key={link.title} className='group block'>
						<SpotlightCard
							className='h-full bg-white transition-all hover:shadow-md'
							spotlightColor={link.spotlightColor}
						>
							<div className='flex flex-col space-y-4'>
								<div
									className={`flex h-12 w-12 items-center justify-center rounded-lg ${link.bgColor}`}
								>
									<link.icon className={`h-6 w-6 ${link.color}`} />
								</div>

								<div>
									<CardTitle className='group-hover:text-primary text-lg text-slate-900 transition-colors'>
										{link.title}
									</CardTitle>
									<CardDescription className='mt-1 text-sm text-slate-600'>
										{link.description}
									</CardDescription>
								</div>
							</div>
						</SpotlightCard>
					</Link>
				))}
			</div>
		</div>
	)
}

----
src/app/(application)/app/layout.tsx
import type { Metadata } from 'next'
import type React from 'react'

import { AppSidebar } from '@/components/app/app-sidebar'
import { TopBar } from '@/components/app/top-bar'
import '@/app/globals.css'
import { SidebarProvider } from '@/components/ui/sidebar'
import {
	ClerkProvider,
	RedirectToSignIn,
	SignedIn,
	SignedOut,
} from '@clerk/nextjs'

export const metadata: Metadata = {
	title: {
		default: 'ForTooling',
		template: '%s - ForTooling',
	},
}

export default function AppLayout({ children }: { children: React.ReactNode }) {
	return (
		<html lang='fr'>
			<head>
				<link
					rel='stylesheet'
					href='https://api.fontshare.com/css?f%5B%5D=switzer@400,500,600,700&amp;display=swap'
				/>
			</head>
			<body className='text-gray-950 antialiased'>
				<ClerkProvider>
					<SignedIn>
						<div className={`h-full min-h-screen`}>
							<SidebarProvider>
								<AppSidebar />
								<div className='ml-20 min-h-screen w-full bg-[#0f2942]'>
									<TopBar />
									<main className='min-h-[calc(100vh-4rem)] w-full overflow-auto rounded-tl-xl bg-stone-50'>
										<div className='h-full w-full max-w-full p-4'>
											{children}
										</div>
									</main>
								</div>
							</SidebarProvider>
						</div>
					</SignedIn>
					<SignedOut>
						<RedirectToSignIn redirectUrl={'/sign-in'} />
					</SignedOut>
				</ClerkProvider>
			</body>
		</html>
	)
}

----
src/app/(application)/app/actions/user.ts
'use server'

import { auth, clerkClient } from '@clerk/nextjs/server'

/**
 * Marks the user's onboarding as complete by setting metadata
 * This allows the application to know that the user has completed the onboarding process
 * and shouldn't be redirected to the onboarding page again
 */
export async function markOnboardingComplete(): Promise<boolean> {
	const { userId } = await auth()

	if (!userId) {
		throw new Error('Authentication required')
	}

	try {
		// Update the user's public metadata
		// hasCompletedOnboarding=true indicates the user has finished onboarding
		// onboardingCompletedAt stores the date when onboarding was completed
		const clerkClientInstance = await clerkClient()
		await clerkClientInstance.users.updateUserMetadata(userId, {
			publicMetadata: {
				hasCompletedOnboarding: true,
				onboardingCompletedAt: new Date().toISOString(),
			},
		})

		return true
	} catch (error) {
		console.error('Error updating user metadata:', error)
		throw new Error('Failed to complete onboarding')
	}
}

----
src/app/(application)/(clerk)/layout.tsx
import '@/app/globals.css'

import type { Metadata } from 'next'
import type React from 'react'

import { AppSidebar } from '@/components/app/app-sidebar'
import { TopBar } from '@/components/app/top-bar'
import { SidebarProvider } from '@/components/ui/sidebar'
import { ClerkProvider } from '@clerk/nextjs'

export const metadata: Metadata = {
	title: {
		default: "ForTooling - Gestion de l'outillage",
		template: '%s - ForTooling',
	},
}

export default function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode
}>) {
	return (
		<ClerkProvider>
			<html lang='fr'>
				<head>
					<link
						rel='stylesheet'
						href='https://api.fontshare.com/css?f%5B%5D=switzer@400,500,600,700&amp;display=swap'
					/>
				</head>
				<body className='text-gray-950 antialiased'>
					<div className={`h-full min-h-screen`}>
						<SidebarProvider>
							<AppSidebar />
							<div className='ml-20 min-h-screen w-full bg-[#0f2942]'>
								<TopBar />
								<main className='min-h-[calc(100vh-4rem)] w-full overflow-auto rounded-tl-xl bg-stone-50'>
									<div className='h-full w-full max-w-full p-4'>{children}</div>
								</main>
							</div>
						</SidebarProvider>
					</div>
				</body>
			</html>
		</ClerkProvider>
	)
}

----
src/app/(application)/(clerk)/waitlist/[[...waitlist]]/page.tsx
import { Container } from '@/components/app/container'
import { Waitlist } from '@clerk/nextjs'

export default function WaitlistPage() {
	return (
		<Container>
			<Waitlist />
		</Container>
	)
}

----
src/app/(application)/(clerk)/sign-up/[[...sign-up]]/page.tsx
import { Container } from '@/components/app/container'
import { SignUp } from '@clerk/nextjs'

export default function SignUpPage() {
	return (
		<Container>
			<SignUp routing='path' path='/sign-up' signInUrl='/sign-in' />
		</Container>
	)
}

----
src/app/(application)/(clerk)/sign-in/[[...sign-in]]/page.tsx
import { Container } from '@/components/app/container'
import { SignIn } from '@clerk/nextjs'

export default function SignInPage() {
	return (
		<Container>
			<SignIn path='/sign-in' signUpUrl='/sign-up' />
		</Container>
	)
}

----
src/app/(application)/(clerk)/organizations/page.tsx
import { Container } from '@/components/app/container'
import { OrganizationList } from '@clerk/nextjs'

export default function OrganizationsPage() {
	return (
		<Container>
			<OrganizationList
				hidePersonal
				afterSelectOrganizationUrl='/organization-profile/:slug'
			/>
		</Container>
	)
}

----
src/app/(application)/(clerk)/organization-profile/[[...organization-profile]]/page.tsx
import { Container } from '@/components/app/container'
import { OrganizationProfile } from '@clerk/nextjs'

export default function OrganizationProfilePage() {
	return (
		<Container>
			<OrganizationProfile />
		</Container>
	)
}

----
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/page.tsx
'use client'

import { CompletionStep } from '@/app/(application)/(clerk)/onboarding/[[...onboarding]]/CompletionStep'
import { FeaturesStep } from '@/app/(application)/(clerk)/onboarding/[[...onboarding]]/FeaturesStep'
import { OrganizationStep } from '@/app/(application)/(clerk)/onboarding/[[...onboarding]]/OrganizationStep'
import { ProfileStep } from '@/app/(application)/(clerk)/onboarding/[[...onboarding]]/ProfileStep'
import { WelcomeStep } from '@/app/(application)/(clerk)/onboarding/[[...onboarding]]/WelcomeStep'
import { markOnboardingComplete } from '@/app/(application)/app/actions/user'
import { Container } from '@/components/app/container'
import { Button } from '@/components/ui/button'
import {
	Stepper,
	StepperItem,
	StepperTrigger,
	StepperIndicator,
	StepperSeparator,
	StepperTitle,
	StepperDescription,
} from '@/components/ui/stepper'
import { OnboardingStep, useOnboardingStore } from '@/stores/onboarding-store'
import {
	useUser,
	SignedIn,
	SignedOut,
	RedirectToSignIn,
	useOrganization,
} from '@clerk/nextjs'
import {
	ArrowLeft,
	ArrowRight,
	Building,
	CheckCircle2,
	Info,
	User,
	Laptop,
} from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'

// Onboarding steps data
const steps = [
	{
		description: 'Bienvenue sur ForTooling',
		icon: <Info className='h-4 w-4' />,
		id: 1,
		title: 'Bienvenue',
	},
	{
		description: 'Découvrez les fonctionnalités clés',
		icon: <Laptop className='h-4 w-4' />,
		id: 2,
		title: 'Fonctionnalités',
	},
	{
		description: 'Configurez votre organisation',
		icon: <Building className='h-4 w-4' />,
		id: 3,
		title: 'Organisation',
	},
	{
		description: 'Complétez votre profil',
		icon: <User className='h-4 w-4' />,
		id: 4,
		title: 'Profil',
	},
	{
		description: 'Vous êtes prêt à commencer',
		icon: <CheckCircle2 className='h-4 w-4' />,
		id: 5,
		title: 'Prêt !',
	},
]

export default function OnboardingPage() {
	const { isLoaded, isSignedIn, user } = useUser()
	const router = useRouter()
	const { organization } = useOrganization()

	// Use the Zustand store
	const { currentStep, isLoading, setCurrentStep, setIsLoading } =
		useOnboardingStore()

	// Step content components stored in an array
	const [stepContents, setStepContents] = useState<React.ReactNode[]>([])

	useEffect(() => {
		// Check if user has completed onboarding
		if (
			isLoaded &&
			isSignedIn &&
			user?.publicMetadata?.hasCompletedOnboarding
		) {
			router.push('/app')
		}

		// Initialize step contents
		setStepContents([
			<WelcomeStep key='welcome' />,
			<FeaturesStep key='features' />,
			<OrganizationStep
				key='organization'
				hasOrganization={!!organization}
				organization={organization || {}}
			/>,
			<ProfileStep key='profile' />,
			<CompletionStep
				key='completion'
				onComplete={completeOnboarding}
				isLoading={isLoading}
			/>,
		])
		// eslint-disable-next-line react-hooks/exhaustive-deps
	}, [isLoaded, isSignedIn, user, router, isLoading, organization])

	const goToNextStep = () => {
		// Check if we're on the organization step (index 2) and block if no organization
		if (currentStep === 3 && !organization) {
			return // Block progression if no organization
		}

		if (currentStep < 5) {
			setCurrentStep((currentStep + 1) as OnboardingStep)
		}
	}

	const goToPreviousStep = () => {
		if (currentStep > 1) {
			setCurrentStep((currentStep - 1) as OnboardingStep)
		}
	}

	async function completeOnboarding() {
		setIsLoading(true)
		try {
			await markOnboardingComplete()
			router.push('/app')
		} catch (error) {
			console.error('Failed to complete onboarding:', error)
		} finally {
			setIsLoading(false)
		}
	}

	if (!isLoaded) {
		return (
			<div className='flex h-full w-full items-center justify-center'>
				<div className='text-muted-foreground animate-pulse'>Chargement...</div>
			</div>
		)
	}

	return (
		<>
			<SignedIn>
				<Container>
					<div className='flex w-full flex-col space-y-6'>
						<div className='space-y-2'>
							<h1 className='text-2xl font-semibold tracking-tight'>
								Bienvenue sur votre plateforme de gestion d&apos;équipements
							</h1>
							<p className='text-muted-foreground'>
								Suivez ces quelques étapes pour configurer votre compte et
								commencer à utiliser ForTooling
							</p>
						</div>

						<div className='w-full py-4'>
							<Stepper value={currentStep} className='w-full'>
								{steps.map((step, index) => (
									<StepperItem
										key={step.id}
										step={step.id}
										completed={currentStep > step.id}
										disabled={currentStep < step.id}
										loading={isLoading && currentStep === step.id}
										className='[&:not(:last-child)]:flex-1'
									>
										<StepperTrigger
											onClick={() =>
												currentStep >= step.id &&
												setCurrentStep(step.id as OnboardingStep)
											}
										>
											<StepperIndicator>{step.icon}</StepperIndicator>
											<div className='hidden flex-col text-left md:inline-flex'>
												<StepperTitle>{step.title}</StepperTitle>
												<StepperDescription>
													{step.description}
												</StepperDescription>
											</div>
										</StepperTrigger>
										{index < steps.length - 1 && <StepperSeparator />}
									</StepperItem>
								))}
							</Stepper>
						</div>

						<div className='bg-card min-h-[400px] w-full rounded-lg border p-6'>
							{stepContents[currentStep - 1]}
						</div>

						<div className='flex w-full justify-between pt-4'>
							<Button
								variant='outline'
								onClick={goToPreviousStep}
								disabled={currentStep === 1}
							>
								<ArrowLeft className='mr-2 h-4 w-4' />
								Précédent
							</Button>

							{currentStep < 5 ? (
								<Button
									onClick={goToNextStep}
									disabled={currentStep === 3 && !organization}
								>
									Suivant
									<ArrowRight className='ml-2 h-4 w-4' />
								</Button>
							) : (
								<Button onClick={completeOnboarding} disabled={isLoading}>
									{isLoading ? 'Chargement...' : 'Terminer'}
								</Button>
							)}
						</div>
					</div>
				</Container>
			</SignedIn>
			<SignedOut>
				<RedirectToSignIn />
			</SignedOut>
		</>
	)
}

----
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/WelcomeStep.tsx
'use client'
import Image from 'next/image'

export function WelcomeStep() {
	return (
		<div className='space-y-4'>
			<div className='flex justify-center py-6'>
				<div className='bg-muted/30 flex h-64 w-64 items-center justify-center rounded-full'>
					<Image
						src='/logo.png'
						alt='ForTooling Logo'
						className='h-32 w-32'
						width={128}
						height={128}
					/>
				</div>
			</div>
			<h2 className='text-center text-xl font-semibold'>
				Bienvenue sur ForTooling
			</h2>
			<p className='text-muted-foreground text-center'>
				Notre solution vous aide à suivre, attribuer et maintenir votre parc
				d&apos;équipements de manière simple <br />
				et efficace grâce aux technologies NFC et QR code.
			</p>
			<div className='text-muted-foreground mt-8 text-center text-sm italic'>
				À jamais les casse-têtes de la gestion de votre parc d&apos;équipements.
			</div>
		</div>
	)
}

----
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/ProfileStep.tsx
'use client'
import { UserProfile } from '@clerk/nextjs'

export function ProfileStep() {
	return (
		<div className='space-y-4'>
			<h2 className='text-center text-xl font-semibold'>
				Complétez votre profil
			</h2>
			<p className='text-muted-foreground mb-4 text-center'>
				Ajoutez quelques informations pour personnaliser votre expérience et
				faciliter la collaboration
			</p>
			<div className='mt-8 flex w-full justify-center'>
				<UserProfile />
			</div>
		</div>
	)
}

----
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/OrganizationStep.tsx
import { Button } from '@/components/ui/button'
import { Organization } from '@clerk/nextjs/server'
import { Building, User, Info, CheckCircle2 } from 'lucide-react'
import Image from 'next/image'
import { useRouter } from 'next/navigation'

export function OrganizationStep({
	hasOrganization,
	organization,
}: {
	hasOrganization: boolean
	organization: Organization
}) {
	const router = useRouter()

	return (
		<div className='space-y-4'>
			<h2 className='text-center text-xl font-semibold'>
				Configurez votre organisation
			</h2>
			<p className='text-muted-foreground text-center'>
				Vous devez créer ou rejoindre une organisation pour continuer. Cela
				permettra de gérer les équipements et utilisateurs de votre entreprise.
			</p>

			{hasOrganization ? (
				<div className='mt-6 flex flex-col items-center'>
					<div className='mb-4 rounded-full bg-green-50 p-2 text-green-700'>
						<CheckCircle2 className='h-8 w-8' />
					</div>
					<p className='font-medium text-green-700'>
						Organisation configurée avec succès!
					</p>
					<p className='text-muted-foreground mt-2 text-sm'>
						Vous pouvez continuer vers l&apos;étape suivante.
					</p>
					<div className='mt-8 flex items-center gap-6'>
						<Image
							src='/logo.png'
							alt='ForTooling Logo'
							width={75}
							height={75}
						/>
						{organization?.imageUrl && (
							<>
								<span className='text-lg font-semibold italic'>x</span>
								<Image
									src={organization.imageUrl || ''}
									alt='Organization Logo'
									width={75}
									height={75}
								/>
							</>
						)}
					</div>
				</div>
			) : (
				<>
					<div className='flex flex-col justify-center gap-4 pt-4 sm:flex-row'>
						<Button
							onClick={() => router.push('/organization-profile')}
							className='w-full sm:w-auto'
						>
							<Building className='mr-2 h-4 w-4' />
							Créer une organisation
						</Button>
						<Button
							variant='outline'
							onClick={() => router.push('/organizations')}
							className='w-full sm:w-auto'
						>
							<User className='mr-2 h-4 w-4' />
							Rejoindre une organisation
						</Button>
					</div>
					<div className='mt-6 border-t pt-4'>
						<div className='rounded-lg bg-amber-50 p-4'>
							<p className='flex items-center gap-2 font-medium text-amber-700'>
								<Info className='h-5 w-5' /> Note importante
							</p>
							<p className='mt-1 text-sm text-amber-600'>
								Vous devez créer ou rejoindre une organisation avant de pouvoir
								continuer. Cliquez sur l&apos;un des boutons ci-dessus, puis
								revenez à cette page.
							</p>
						</div>
					</div>
				</>
			)}
		</div>
	)
}

----
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/FeaturesStep.tsx
import { ClipboardList, Construction, Scan, Wrench } from 'lucide-react'

export function FeaturesStep() {
	return (
		<div className='flex w-full flex-col items-center justify-center space-y-4'>
			<h2 className='text-center text-xl font-semibold'>
				Découvrez nos fonctionnalités clés
			</h2>
			<div className='grid h-full w-full grid-cols-1 items-center gap-4 py-8 md:grid-cols-2'>
				<div className='rounded-lg border bg-white p-4 transition-shadow duration-200 hover:shadow-md'>
					<div className='mb-2 flex items-center gap-2'>
						<Wrench className='h-5 w-5 text-blue-500' />
						<h3 className='font-medium'>Suivi d&apos;équipements</h3>
					</div>
					<p className='text-muted-foreground text-sm'>
						Localisez et suivez tous vos équipements en temps réel avec la
						technologie NFC/QR
					</p>
				</div>
				<div className='rounded-lg border bg-white p-4 transition-shadow duration-200 hover:shadow-md'>
					<div className='mb-2 flex items-center gap-2'>
						<Construction className='h-5 w-5 text-amber-500' />
						<h3 className='font-medium'>Attribution aux projets</h3>
					</div>
					<p className='text-muted-foreground text-sm'>
						Affectez facilement des équipements aux utilisateurs et aux projets
					</p>
				</div>
				<div className='rounded-lg border bg-white p-4 transition-shadow duration-200 hover:shadow-md'>
					<div className='mb-2 flex items-center gap-2'>
						<Scan className='h-5 w-5 text-purple-500' />
						<h3 className='font-medium'>Scan rapide</h3>
					</div>
					<p className='text-muted-foreground text-sm'>
						Scannez les équipements en quelques secondes pour obtenir leur
						statut et les gérer
					</p>
				</div>
				<div className='rounded-lg border bg-white p-4 transition-shadow duration-200 hover:shadow-md'>
					<div className='mb-2 flex items-center gap-2'>
						<ClipboardList className='h-5 w-5 text-red-500' />
						<h3 className='font-medium'>Rapports détaillés</h3>
					</div>
					<p className='text-muted-foreground text-sm'>
						Générez des analyses détaillées sur l&apos;utilisation de votre parc
						matériel
					</p>
				</div>
			</div>
		</div>
	)
}

----
src/app/(application)/(clerk)/onboarding/[[...onboarding]]/CompletionStep.tsx
'use client'

import { Button } from '@/components/ui/button'
import confetti from 'canvas-confetti'
import { CheckCircle2, ThumbsUp, Rocket, CircleCheck } from 'lucide-react'
import { useEffect, useRef } from 'react'

export function CompletionStep({
	isLoading,
	onComplete,
}: {
	onComplete: () => void
	isLoading: boolean
}) {
	const confettiTriggered = useRef(false)

	useEffect(() => {
		// Trigger confetti animation when component loads
		// But only once (using useRef for tracking)
		if (!confettiTriggered.current) {
			triggerConfetti()
			confettiTriggered.current = true
		}
	}, [])

	const triggerConfetti = () => {
		const end = Date.now() + 3 * 1000 // 3 seconds
		const colors = ['#a786ff', '#fd8bbc', '#eca184', '#f8deb1']

		// Side cannons animation (left and right)
		const frame = () => {
			if (Date.now() > end) return

			// Left side
			confetti({
				angle: 60,
				colors: colors,
				origin: { x: 0, y: 0.5 },
				particleCount: 2,
				spread: 55,
				startVelocity: 60,
			})

			// Right side
			confetti({
				angle: 120,
				colors: colors,
				origin: { x: 1, y: 0.5 },
				particleCount: 2,
				spread: 55,
				startVelocity: 60,
			})

			requestAnimationFrame(frame)
		}

		frame()

		// Add a central burst at the beginning
		confetti({
			origin: { y: 0.6 },
			particleCount: 100,
			spread: 70,
		})
	}

	return (
		<div className='space-y-4 text-center'>
			<div className='flex justify-center py-6'>
				<div className='rounded-full bg-green-50 p-6'>
					<CheckCircle2 className='h-20 w-20 text-green-500' />
				</div>
			</div>

			<h2 className='text-2xl font-bold'>Félicitations ! 🎉</h2>
			<p className='text-xl font-semibold text-[#0f2942]'>
				Vous êtes prêt à utiliser ForTooling
			</p>

			<div className='mx-auto mt-6 max-w-md'>
				<p className='text-muted-foreground'>
					Votre compte est maintenant configuré. Vous pouvez commencer à
					utiliser ForTooling pour optimiser la gestion de votre parc
					d&apos;équipements.
				</p>
			</div>

			<div className='mx-auto mt-8 grid max-w-2xl grid-cols-1 gap-4 md:grid-cols-3'>
				<div className='flex flex-col items-center rounded-lg bg-blue-50 p-4 text-blue-700'>
					<ThumbsUp className='mb-2 h-8 w-8' />
					<p className='text-sm'>Gestion simplifiée</p>
				</div>
				<div className='flex flex-col items-center rounded-lg bg-green-50 p-4 text-green-700'>
					<Rocket className='mb-2 h-8 w-8' />
					<p className='text-sm'>Performance optimisée</p>
				</div>
				<div className='flex flex-col items-center rounded-lg bg-purple-50 p-4 text-purple-700'>
					<CircleCheck className='mb-2 h-8 w-8' />
					<p className='text-sm'>Expérience optimale</p>
				</div>
			</div>

			<div className='mx-auto mt-6 max-w-md rounded-lg bg-blue-50 p-4'>
				<p className='text-sm text-blue-700'>
					Notre équipe est disponible pour vous aider si vous avez des
					questions. N&apos;hésitez pas à nous contacter à{' '}
					<strong>contact@fortooling.com</strong>
				</p>
			</div>

			<div className='mt-10'>
				<Button
					onClick={onComplete}
					disabled={isLoading}
					className='mt-4 bg-[#0f2942] px-8 py-6 text-white hover:bg-[#0a1f34]'
					size='lg'
				>
					{isLoading ? 'Chargement...' : 'Accéder à la plateforme'}
				</Button>
			</div>
		</div>
	)
}

----
src/app/(application)/(clerk)/create-organization/[[...create-organization]]/page.tsx
'use client'

import { Container } from '@/components/app/container'
import { CreateOrganization } from '@clerk/nextjs'

export default function CreateOrganizationPage() {
	return (
		<Container>
			<CreateOrganization afterCreateOrganizationUrl='/app' />
		</Container>
	)
}

----
docs-and-prompts/technique-prompt-system.md
# Prompt Système pour Assistant de Développement SaaS - Plateforme de Gestion d'Équipements NFC/QR

## 🎯 Contexte du Projet

Tu es un assistant de développement expert spécialisé dans la création d'une plateforme SaaS de gestion d'équipements avec tracking NFC/QR. Ce système permet aux entreprises de suivre, attribuer et maintenir leur parc d'équipements via une interface moderne et des fonctionnalités avancées de scanning et de reporting.

## 📋 Directives Générales

- **Langue**: Toujours coder et commenter en anglais
- **Style de collaboration**: Proactif et pédagogique, explique tes choix techniques
- **Format de réponse**: Structuré, avec des sections claires et une bonne utilisation du markdown
- **Erreurs**: Identifie de manière proactive les problèmes potentiels dans mon code
- **Standards**: Respecte les meilleures pratiques pour chaque technologie utilisée
- **Optimisations**: Suggère des améliorations de performance, sécurité et maintenabilité

## 🏗️ Stack Technique à Respecter

### Frontend

- **Framework**: Next.js 15+, React 19+
- **Styling**: Tailwind CSS 4+, shadcn/ui
- !! Attention, on va utiliser Tailwind v4, et pas les versions en dessous, on évitera les morceaux de code incompatible lié à Tailwindv3
- **État**: Zustand pour la gestion d'état globale (éviter le prop drilling)
- **Forms**: Tan Stack Form + Zod pour la validation
- **Animations**: Framer Motion, Rive pour les animations complexes
- **UI**: Composants shadcn/ui, icônes Lucide React
- **Mobile**: next-pwa, WebNFC API, QR code fallback

### Backend

- **API**: Next.js Server Actions avec middleware de protection centralisé
- **Validation**: Zod pour la validation des données
- **ORM**: Prisma avec PostgreSQL
- **Authentification**: Clerk 6+
- **Paiements**: Stripe
- **Recherche**: Algolia
- **Stockage**: Cloudflare R2
- **Emails**: Resend
- **SMS**: Twilio
- **Temps réel**: Socket.io
- **Tâches asynchrones**: Temporal.io

### DevOps & Sécurité

- **Déploiement**: Coolify, Docker
- **CI/CD**: GitHub Actions
- **Monitoring**: Prometheus, Grafana, Loki, Glitchtip
- **Analytics**: Umami
- **Sécurité API**: Rate limiting, CORS, Helmet

## 11. Schéma / visualisation

Tout les schémas et assets pour les visualisations sont dans le dossier [dev-assets](../dev-assets/images ...) pour la partie dev , et pour les éléments visuels, ils se trouveront dans le dossier public/assets/ pour la partie prod.
Si il y a besoin de schémas, il faut les les créer avec [Mermaid](https://mermaid-js.github.io/) et suivre les bonnes pratiques de ce langage.

## 🖋️ Conventions de Code & Documentation

### Structuration du Code

- Architecture modulaire et maintenable
- Séparation claire des préoccupations (SoC)
- DRY (Don't Repeat Yourself) et SOLID principles
- Pattern par fonctionnalité plutôt que par type technique
- Centralisation des vérifications de sécurité et d'autorisation

### Style de Code

- **TypeScript**: Types stricts et exhaustifs
- **React**: Composants fonctionnels avec hooks
- **Imports**: Groupés et ordonnés (1. React/Next, 2. Libs externes, 3. Components, 4. Utils)
- **Nommage**: camelCase pour variables/fonctions, PascalCase pour composants/types
- **État**: Préférer `useState`, `useReducer` localement, Zustand globalement

### Documentation

- **JSDoc** pour toutes les fonctions, hooks, et types complexes:

```typescript
/**
 * Fetches equipment data based on provided filters
 * @param {EquipmentFilters} filters - The filters to apply to the query
 * @param {QueryOptions} options - Optional query parameters
 * @returns {Promise<EquipmentData[]>} Array of equipment matching filters
 * @throws {ApiError} When the API request fails
 */
```

- **Commentaires de code**: Explique le "pourquoi", pas le "quoi"
- Ajoute des logs explicatifs aux endroits clés

### Tests

- Tests unitaires avec Vitest
- Tests end-to-end avec Playwright
- Privilégier les tests pour la logique métier critique

## 📐 Structure de Projet Attendue

```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/             # Routes authentifiées
│   ├── (marketing)/        # Routes publiques (landing)
│   └── api/                # Routes API REST si nécessaire
├── components/             # Composants React partagés
│   ├── ui/                 # Composants UI de base (shadcn)
│   └── [feature]/          # Composants spécifiques aux fonctionnalités
├── lib/                    # Code utilitaire partagé
├── server/                 # Code serveur
│   ├── actions/            # Next.js Server Actions protégées
│   │   └── middleware.ts   # Wrapper de protection HOF
│   ├── db/                 # Prisma et utilitaires DB
│   └── services/           # Logique métier
├── stores/                 # Stores Zustand
├── styles/                 # Styles globaux Tailwind
└── types/                  # Types TypeScript partagés
```

## 🤝 Collaboration Attendue

- **Proactivité**: Anticipe les besoins et problèmes potentiels
- **Pédagogie**: Explique les concepts complexes et les choix d'architecture
- **Adaptabilité**: Ajuste-toi à mes besoins et préférences au fur et à mesure
- **Progressivité**: Commence par les fondamentaux puis avance vers des implémentations plus complexes
- **Optimisations**: Suggère des améliorations mais priorise la lisibilité et la maintenabilité

## 🚨 Anti-patterns à Éviter

- Ne pas utiliser de classes React (préférer les composants fonctionnels)
- Éviter les any/unknown en TypeScript si possible
- Ne pas réinventer ce qui existe déjà dans les bibliothèques choisies
- Éviter les dépendances inutiles ou redondantes
- Ne pas mélanger les styles (préférer Tailwind)
- Éviter d'exposer des données sensibles dans le frontend
- Ne pas dupliquer la logique d'authentification et de validation
- Éviter de créer des Server Actions sans utiliser le middleware de protection

## 🔄 Processus de Travail

1. Comprends d'abord mon besoin ou problème
2. Propose une approche structurée avec les technologies appropriées
3. Implémente en expliquant les choix techniques
4. Suggère des améliorations ou alternatives si pertinent
5. Offre des conseils pour les tests et la maintenance

Utilise ces directives pour m'assister de manière précise et efficace dans le développement de cette plateforme SaaS de gestion d'équipements NFC/QR.

----
docs-and-prompts/stack-technique.md
# Stack Technique Finale - Plateforme SaaS de Gestion d'Équipements NFC/QR

## 1. Vue d'ensemble

Cette plateforme SaaS de gestion d'équipements avec tracking NFC/QR combine les technologies modernes du web pour offrir une solution robuste, performante et évolutive. L'architecture est conçue pour être hautement optimisée, sécurisée et facile à maintenir.

## 2. Frontend

### Framework & UI

- **Next.js 15+** - Framework React avec App Router et Server Components
- **React 19+** - Bibliothèque UI pour construire des interfaces interactives
- **Tailwind CSS 4+** - Framework CSS utility-first pour le styling
- **shadcn/ui** - Composants UI réutilisables basés sur Radix UI
- **Lucide React** - Bibliothèque d'icônes SVG
- **Framer Motion** - Animations et transitions fluides
- **Rive** - Animations complexes et interactives

### Gestion d'état client

- **Zustand** - Gestion d'état global légère et simple
  - Utilisé pour éviter le prop drilling
  - Stockage des préférences utilisateur, thèmes, filtres
  - État partagé entre composants distants

### PWA & Mobile

- **next-pwa** - Transforme l'application en Progressive Web App
- **WebNFC API** - Accès aux fonctionnalités NFC pour les appareils compatibles
- **QR Code fallback** - Solution alternative pour les appareils sans NFC

### Qualité & Tests

- **TypeScript** - Typage statique pour une meilleure qualité de code
- **ESLint/Prettier** - Linting et formatage de code
- **Vitest** - Tests unitaires rapides
- **Playwright** - Tests end-to-end

## 3. Backend & API

### API & Validation

- **Next.js Server Actions** - Actions serveur typées et sécurisées
  - Pattern de protection centralisé (HOF withProtection)
  - Isolation multi-tenant intégrée
- **Zod** - Validation de schémas pour les données d'entrée
- **Tan stack Form** - Gestion de formulaires avec validation côté client

### Backend

- **Pockebase** - Backend as a service

### Sécurité API

- **Rate limiting** - Protection contre les abus
- **CORS** - Sécurité pour les requêtes cross-origin
- **Helmet** - Sécurisation des headers HTTP

## 4. Services & Intégrations

### Authentification & Paiements

- **Clerk 6+** - Authentification complète et gestion des utilisateurs
- **Stripe** - Traitement des paiements et gestion des abonnements

### Recherche & Stockage

- **Algolia** - Recherche rapide et pertinente
- **Cloudflare R2** - Stockage d'objets compatible S3

### Communication & Notifications

- **Resend** - Service d'emails transactionnels
- **Twilio** - SMS et notifications mobiles
- **Socket.io** - Communication temps réel pour le monitoring

### Fonctionnalités spécifiques

- **OpenStreetMap + Leaflet.js** - Cartographie et géolocalisation
- **React-PDF** - Génération de rapports PDF
- **SheetJS** - Export de données en format Excel
- **Temporal.io** - Orchestration de workflows et tâches asynchrones

## 5. Infrastructure & DevOps

### Déploiement & CI/CD

- **Coolify** - Plateforme self-hosted pour le déploiement
- **Docker** - Conteneurisation des services
- **GitHub Actions** - Automatisation CI/CD

### Monitoring & Observabilité

- **Prometheus + Grafana** - Collecte et visualisation de métriques
- **Loki** - Agrégation et exploration de logs
- **Glitchtip** - Suivi des erreurs (compatible avec l'API Sentry)
- **Umami** - Analytics respectueux de la vie privée

### Sauvegarde & Restauration

- **pgbackrest** - Solution de backup robuste pour PostgreSQL
- **pg_dump automatisé** - Sauvegardes programmées

## 6. Architecture multi-tenant

- Architecture à schéma unique avec discrimination par tenant_id
- Isolation des données par organisation au niveau des Server Actions
- Middleware de protection centralisé pour les vérifications d'accès
- Optimisation des requêtes grâce aux index sur tenant_id

## 7. Intégration NFC/QR

- Approche hybride WebNFC + QR Code
- Points de scan fixes (entrées/sorties)
- Options pour scanners Bluetooth dans les zones de forte utilisation

## 8. Optimisations & Performance

- **SEO** - Optimisation pour la partie publique (landing)
  - Screaming Frog pour l'audit
  - Lighthouse pour les bonnes pratiques
- **Web Vitals** - Suivi continu des métriques de performance
- **Unlighthouse/IBM checker** - Outils d'analyse supplémentaires

## 9. Documentation

- **Swagger/OpenAPI** - Documentation d'API auto-générée
- **Docusaurus** - Documentation utilisateur et technique

## 10. Structure du projet

```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/             # Routes authentifiées
│   ├── (marketing)/        # Routes publiques (landing)
│   └── api/                # Routes API REST si nécessaire
├── components/             # Composants React partagés
│   ├── ui/                 # Composants UI de base (shadcn)
│   └── [feature]/          # Composants spécifiques aux fonctionnalités
├── lib/                    # Code utilitaire partagé
├── server/                 # Code serveur
│   ├── actions/            # Next.js Server Actions protégées
│   │   └── middleware.ts   # Wrapper de protection HOF
│   ├── db/                 # Prisma et utilitaires DB
│   └── services/           # Logique métier
├── stores/                 # Stores Zustand
├── styles/                 # Styles globaux Tailwind
└── types/                  # Types TypeScript partagés
```

----
docs-and-prompts/diagram-mermaid.md
# Diagram

```text
erDiagram
Organization {
    string id PK
    string name
    string email
    string phone
    string address
    json settings
    string clerkId
    string stripeCustomerId
    string subscriptionId
    string subscriptionStatus
    string priceId
    date created
    date updated
}

User {
    string id PK
    string name
    string email
    string phone
    string role
    boolean isAdmin
    boolean canLogin
    string lastLogin
    file avatar
    boolean verified
    boolean emailVisibility
    string clerkId
    date created
    date updated
}

Equipment {
    string id PK
    string organizationId FK
    string name
    string qrNfcCode
    string tags
    editor notes
    date acquisitionDate
    string parentEquipmentId FK
    date created
    date updated
}

Project {
    string id PK
    string organizationId FK
    string name
    string address
    editor notes
    date startDate
    date endDate
    date created
    date updated
}

Assignment {
    string id PK
    string organizationId FK
    string equipmentId FK
    string assignedToUserId FK
    string assignedToProjectId FK
    date startDate
    date endDate
    editor notes
    date created
    date updated
}

Image {
    string id PK
    string title
    string alt
    string caption
    file image
    date created
    date updated
}

Organization ||--o{ User : has
Organization ||--o{ Equipment : owns
Organization ||--o{ Project : manages
Organization ||--o{ Assignment : oversees

User }o--o{ Assignment : "is assigned to"

Equipment }o--o{ Assignment : "is assigned via"
Equipment }o--o{ Equipment : "parent/child"

Project }o--o{ Assignment : includes
```

----
docs-and-prompts/cahier-des-charges.md
## 1. Contexte et problématique générale

### 1.1 Problématique adressée

De nombreuses entreprises possèdent et gèrent un parc d'équipements qu'elles doivent suivre, attribuer et entretenir. Ces équipements peuvent représenter plusieurs dizaines à centaines d'articles différents (outils, matériel technique, appareils spécialisés, etc.).

Les systèmes traditionnels de gestion présentent des lacunes importantes :

- Suivi manuel chronophage et source d'erreurs
- Difficulté à localiser rapidement les équipements
- Absence d'historique fiable des mouvements et utilisations
- Complexité pour gérer les attributions
- Manque de visibilité globale sur l'état du parc
- Coût très elevé pour des balises gps précies (e.g hilti etc)
- Impossibilité d'appliquer ça sur des éléments autres

## 2. Objectifs de la plateforme SaaS

Développer une plateforme SaaS de gestion d'équipements qui permettra de :

- Centraliser l'inventaire complet du parc matériel
- Suivre la localisation de chaque équipement en temps réel grâce à des étiquettes nfc/qr
- Gérer l'attribution des équipements aux utilisateurs et aux projets/emplacements
- Automatiser la détection des entrées/sorties d'équipements via des points de scan
- Conserver l'historique de tous les mouvements et utilisations
- Fournir des analyses et statistiques d'utilisation avancées
- Offrir une solution adaptable à différents secteurs d'activité

## 3. Besoins fonctionnels détaillés

### 3.1 Gestion multi-organisations

- Support de plusieurs organisations clientes avec isolation complète des données
- Paramétrage par organisation (terminologie, champs personnalisés, flux de travail)
- Gestion des rôles et permissions par organisation

### 3.2 Gestion des équipements

- Inventaire complet avec informations détaillées :
  - Référence unique et code NFC/qr associé
  - Nom et description
  - Date d'acquisition et valeur
  - État et niveau d'usure
  - Spécifications techniques (type, marque, modèle, etc.)
  - Catégorie de rattachement
  - Champs personnalisables selon le secteur d'activité
- Création, modification et suppression d'équipements
- Association d'un équipement à une catégorie spécifique
- Support pour documentation technique, photos et fichiers associés
- Gestion des maintenances préventives et curatives

### 3.3 Suivi automatisé par NFC // ou SCAN QR Code

- Intégration avec des étiquettes nfc/qr à faible coût / ou équivalent
- Points de scan aux entrées/sorties des zones de stockage
- Scan mobile via smartphones/tablettes pour vérification terrain
- Détection automatique des mouvements d'équipements
- Alertes en cas de sortie non autorisée
  - mail
  - sms
  - alerte perso
- Cartographie des dernières localisations connues

### 3.4 Gestion des affectations

- Attribution d'équipements à :
  - Un utilisateur/employé
  - Un projet/chantier
  - Un emplacement physique
- Enregistrement des dates de début et fin d'affectation
- Affectation groupée de plusieurs équipements simultanément
- Workflows d'approbation configurables
- Historique complet des affectations

### 3.5 Gestion des utilisateurs

- Enregistrement des informations sur les utilisateurs :
  - Profil complet (nom, prénom, contact, etc.)
  - Rôle et permissions dans le système
  - Département/équipe de rattachement
- Suivi des équipements attribués à chaque utilisateur
- Gestion des accès par niveau de permission

### 3.6 Gestion des projets/emplacements/chantiers

- Structure flexible adaptable selon les besoins :
  - Projets temporaires avec dates de début/fin
  - Emplacements physiques permanents
  - Zones géographiques
- Hiérarchisation possible (bâtiment > étage > pièce)
- Géolocalisation et cartographie
- Suivi des équipements affectés

### 3.7 Catégorisation des équipements

- Système de catégories et sous-catégories multiniveau
- Attributs spécifiques par catégorie d'équipement
- Système de préfixage automatique des références
- Organisation logique adaptée au secteur d'activité

### 3.8 Analyses et statistiques avancées

- Dashboard personnalisable avec indicateurs clés
- Rapports sur les taux d'utilisation des équipements
- Analyses prédictives pour planification des besoins
- Alertes sur équipements sous-utilisés ou sur-utilisés
- Statistiques par utilisateur, projet, catégorie et équipement
- Rapports exportables dans différents formats

### 3.9 Intégration et API

- API REST complète pour intégration avec d'autres systèmes
- Intégration possible avec des ERP, GMAO, ou logiciels comptables
- Export/import de données en différents formats
- Webhooks pour événements système

## 4. Description fonctionnelle détaillée

### 4.1 Structure générale

- Interface responsive accessible sur tous supports
- Cinq modules principaux : Utilisateurs, Projets/Emplacements, Catégories, Équipements, Affectations
- Navigation intuitive avec accès contextuel aux fonctionnalités
- Dashboard personnalisable par type d'utilisateur

### 4.2 Module de gestion des utilisateurs

- Annuaire complet avec recherche avancée et filtres
- Gestion des profils avec historique d'activité
- Vue des équipements actuellement affectés
- Statistiques d'utilisation et de responsabilité matérielle
- Système de notification personnalisable

### 4.3 Module de gestion des projets/emplacements

- Structure adaptable selon le secteur d'activité
- Visualisation des équipements actuellement présents
- Timeline d'occupation des ressources
- Planification des besoins futurs
- Cartographie des emplacements physiques

### 4.4 Module de gestion des catégories

- Arborescence des catégories personnalisable
- Gestion des attributs spécifiques par catégorie
- Règles de nommage et d'attribution automatisées
- Templates pour accélérer la création d'équipements similaires
- Rapports analytiques par catégorie

### 4.5 Module de gestion des équipements

- Interface complète de gestion d'inventaire
- Fiche détaillée avec historique complet de chaque équipement
- Journal d'activité avec tous les mouvements et scans nfc/qr
- Suivi du cycle de vie (de l'acquisition à la mise au rebut)
- Planning de maintenance préventive
- Système d'alerte pour maintenance ou certification à renouveler

### 4.6 Module de gestion des affectations

- Processus guidé d'affectation avec validation
- Scan nfc/qr pour confirmation de prise en charge
- Vue calendaire des disponibilités
- Système de réservation anticipée
- Alertes de retour pour affectations arrivant à échéance
- Workflows configurables avec approbations multi-niveaux

### 4.7 Fonctionnalités de recherche avancée

- Recherche globale intelligente sur tous les critères
- Filtres contextuels et sauvegarde de recherches favorites
- Recherche par scan nfc/qr pour identification rapide
- Suggestions intelligentes basées sur l'historique

### 4.8 Module d'administration et paramétrage

- Configuration complète adaptée à chaque organisation
- Personnalisation de la terminologie et des champs
- Gestion des droits et rôles utilisateurs
- Audit logs pour toutes les actions système
- Paramétrage des notifications et alertes

## 5. Interactions et automatisations

### 5.1 Workflow de scan nfc/qr

- Scan à l'entrée/sortie des zones de stockage
- Mise à jour automatique de la localisation
- Vérification de la légitimité du mouvement
- Création automatique d'affectation sur scan sortant
- Clôture automatique d'affectation sur scan entrant

### 5.2 Interactions entre équipements

- Gestion des relations parent/enfant entre équipements
- Suivi des assemblages/désassemblages
- Alertes sur incompatibilités potentielles
- Recommandations d'équipements complémentaires

### 5.3 Automatisation des processus

- Rappels automatiques pour retours d'équipements
- Alertes de maintenance basées sur l'utilisation réelle
- Détection d'anomalies dans les patterns d'utilisation
- Suggestions d'optimisation du parc

Ce cahier des charges est destiné à servir de référence pour le développement d'une plateforme SaaS de gestion d'équipements adaptable à différents secteurs d'activité, avec un accent particulier sur l'automatisation via technologie nfc/qr et l'analyse avancée des données.

----
docs-and-prompts/market/tunnel-conversion.md
# Tunnel de Conversion ForTooling - Phase de Lancement

## 1. Structure du Tunnel de Vente

### Phase 1: Attraction (Acquisition)

- **Objectif**: Attirer des prospects qualifiés vers la landing page
- **Canaux prioritaires**: Google Ads, LinkedIn, référencement naturel
- **Message principal**: "Solution innovante pour suivre vos équipements BTP à prix mini"
- **KPI**: Coût par clic qualifié, taux de rebond initial

### Phase 2: Intérêt (Landing Page)

- **Objectif**: Capter l'attention et démontrer la compréhension du problème
- **Méthode**: Hero section impactante + section problème/solution
- **Message clé**: "Fini les pertes d'équipements et le temps perdu à chercher"
- **KPI**: Taux de scroll, temps sur page

### Phase 3: Considération (Démonstration Valeur)

- **Objectif**: Prouver l'efficacité et le ROI de la solution
- **Méthode**: Section "Comment ça marche" + avantages + simulateur d'économies
- **Message clé**: "Simple, rapide et jusqu'à 70% moins cher que les alternatives"
- **KPI**: Interactions avec simulateur, vidéos vues

### Phase 4: Conversion (Essai Gratuit)

- **Objectif**: Inciter à l'essai gratuit de 14 jours
- **Méthode**: Offre spéciale lancement + formulaire simplifié + garanties
- **Message clé**: "Essayez sans risque pendant 14 jours - Programme pionnier"
- **KPI**: Taux de conversion vers essai gratuit

### Phase 5: Onboarding (Post-Conversion)

- **Objectif**: Maximiser l'adoption et l'usage pendant l'essai
- **Méthode**: Email séquentiels + appel de bienvenue + guide démarrage
- **Message clé**: "Voyez des résultats concrets en seulement quelques jours"
- **KPI**: Taux d'activation, % utilisation des fonctionnalités clés

### Phase 6: Conversion finale (Devenir client)

- **Objectif**: Transformer l'essai en abonnement payant
- **Méthode**: Démonstration ROI déjà réalisé + offre spéciale fin d'essai
- **Message clé**: "Continuez à économiser avec notre offre spéciale pionnier"
- **KPI**: Taux de conversion essai → client payant

## 2. Optimisation du Formulaire d'Essai Gratuit

### Principes clés

- **Minimalisme**: Demander uniquement l'information essentielle
- **Étapes**: Limiter à une seule étape si possible (max 2)
- **Valeur perçue**: Mettre en avant ce qu'ils obtiennent immédiatement
- **Réduction des frictions**: Éliminer tout obstacle à la complétion

### Informations à collecter (par ordre de priorité)

1. Email professionnel (obligatoire)
2. Numéro de téléphone (obligatoire - crucial pour suivi)
3. Nom de l'entreprise (obligatoire)
4. Taille approximative du parc d'équipements (optionnel mais utile)

### Éléments de réassurance

- "Sans carte bancaire"
- "Configuration en 48h"
- "Données sécurisées et confidentielles"
- "Annulation en 1 clic"

## 3. Séquence Emails Post-Inscription

### Email 1: Confirmation immédiate

- **Objet**: "Bienvenue dans l'aventure ForTooling! Voici la suite..."
- **Contenu**: Confirmation + prochaines étapes + calendrier rendez-vous onboarding
- **CTA**: "Planifier mon appel de démarrage rapide (15min)"

### Email 2: J+1 - Guide de démarrage

- **Objet**: "Votre guide étape par étape pour démarrer avec ForTooling"
- **Contenu**: PDF guide démarrage + vidéo courte + FAQ initiale
- **CTA**: "Voir la vidéo de démarrage (3min)"

### Email 3: J+3 - Première vérification

- **Objet**: "Avez-vous rencontré des difficultés avec ForTooling?"
- **Contenu**: Check-in + astuces clés + proposition d'aide
- **CTA**: "Répondre pour obtenir de l'aide" ou "Tout va bien!"

### Email 4: J+7 - Milestone et fonctionnalités avancées

- **Objet**: "Découvrez ces 3 fonctionnalités qui vous feront gagner du temps"
- **Contenu**: Fonctionnalités avancées + témoignage + astuce pro
- **CTA**: "Activer ces fonctionnalités"

### Email 5: J+10 - Partage de cas d'usage

- **Objet**: "Comment les entreprises BTP utilisent ForTooling (exemples concrets)"
- **Contenu**: Cas d'usage + scénarios + bonnes pratiques
- **CTA**: "Appliquer ces méthodes à votre entreprise"

### Email 6: J+12 - Préparation fin d'essai

- **Objet**: "Votre essai ForTooling se termine dans 2 jours - Voici votre offre spéciale"
- **Contenu**: Récapitulatif valeur + offre exclusive + procédure simple
- **CTA**: "Activer mon offre spéciale pionniers (-50%)"

### Email 7: J+14 - Dernier jour

- **Objet**: "DERNIER JOUR - Votre décision concernant ForTooling"
- **Contenu**: Options disponibles + rappel bénéfices + témoignages
- **CTA**: "Continuer avec ForTooling" ou "Planifier un dernier appel"

### Email 8: J+15 - Récupération (si pas converti)

- **Objet**: "Nous respectons votre décision, mais avant de nous quitter..."
- **Contenu**: Sondage court + offre dernière chance + possibilité extension
- **CTA**: "Bénéficier d'une semaine supplémentaire d'essai"

## 4. Script d'Appel de Bienvenue

### Objectif de l'appel

Établir une relation, comprendre les besoins spécifiques, assurer le bon démarrage

### Introduction (1min)

"Bonjour [Prénom], merci d'avoir démarré votre essai de ForTooling! Je m'appelle [Votre nom] et je suis là pour m'assurer que vous puissiez tirer le maximum de votre période d'essai. Avez-vous quelques minutes pour que nous parlions de vos besoins spécifiques?"

### Questions clés (5min)

1. "Pouvez-vous me parler brièvement des défis que vous rencontrez actuellement avec la gestion de vos équipements?"
2. "Environ combien d'équipements souhaitez-vous suivre avec ForTooling?"
3. "Avez-vous déjà utilisé une solution similaire par le passé?"
4. "Qu'est-ce qui vous a incité à essayer ForTooling spécifiquement?"

### Présentation personnalisée (5min)

"D'après ce que vous me dites, je pense que ces fonctionnalités spécifiques pourraient vous être particulièrement utiles..." (adapter selon réponses)

### Plan de démarrage (3min)

"Voici ce que je vous propose comme plan pour ces 14 jours d'essai:

1. Aujourd'hui/demain: Configuration initiale de votre compte
2. D'ici la fin de semaine: Étiquetage de vos premiers équipements (10-20)
3. Début semaine prochaine: Formation rapide de vos équipes (15min max)
4. Milieu de semaine prochaine: Premier bilan d'utilisation avec moi
   Cela vous semble-t-il réalisable?"

### Conclusion et prochaines étapes (1min)

"Super! Je vais vous envoyer un récapitulatif par email. N'hésitez pas à me contacter directement à ce numéro si vous avez la moindre question. Notre objectif est que vous puissiez voir des résultats concrets avant la fin de votre période d'essai."

## 5. Stratégie de Relance Fin d'Essai

### Principes

- Approche consultative plutôt que pression commerciale
- Focus sur valeur déjà obtenue pendant l'essai
- Offre spéciale avec délai limité

### Timing des relances

- J-3: Email préparatoire
- J-1: Relance téléphonique
- J+0: Email "dernier jour"
- J+1: Appel de récupération si non converti

### Script d'appel J-1

"Bonjour [Prénom], c'est [Votre nom] de ForTooling. Je vous appelle car votre période d'essai se termine demain, et je voulais faire un point avec vous:

1. Comment s'est passée votre expérience jusqu'à présent?
2. Avez-vous pu observer des améliorations dans la gestion de vos équipements?
3. Y a-t-il des questions ou préoccupations qui pourraient vous empêcher de continuer?

Comme vous faites partie de nos premiers utilisateurs, nous avons une offre spéciale "Pionnier": -50% sur votre abonnement première année, ce qui ramène le coût à seulement [X]€ par mois.

Souhaitez-vous bénéficier de cette offre pour continuer avec ForTooling?"

## 6. Tactiques de Réduction des Abandons

### Identifiez les signes d'alerte précoces

- Non-connexion après 3 jours
- Moins de 5 équipements enregistrés
- Absence de scans après configuration

### Actions préventives

- Email personnalisé: "Besoin d'aide pour démarrer?"
- Appel proactif: "Puis-je vous aider avec la mise en place?"
- Offre d'extension: "Besoin de plus de temps? Essayez 7 jours supplémentaires"

### Incitatifs de rétention

- Débloquer fonctionnalité premium pendant l'essai
- Offrir configuration gratuite des 20 premiers équipements
- Proposer session de formation équipe offerte

### Feedback sur les abandons

- Sondage court et simple
- Appel de suivi non-commercial
- Offre de retour facilitée (données conservées 30 jours)

----
docs-and-prompts/market/strategie-marketing-honnete.md
# Stratégie Marketing ForTooling - Phase de Lancement

## Positionnement Stratégique pour une Nouvelle Solution

### USP (Unique Selling Proposition)

"ForTooling : La solution de gestion d'équipements BTP la plus simple et abordable du marché - Suivez tout votre matériel pour moins de 2€ par jour."

### Points de différenciation clés (Factuel et vérifiable)

- **Prix ultra-compétitif** (50-70% moins cher que les options établies)
- **Zéro matériel coûteux** (QR codes/NFC vs balises GPS onéreuses)
- **Solution terrain adaptée aux chantiers** (interface simplifiée, étiquettes résistantes)
- **Mise en place en moins de 48h** (vs semaines pour solutions traditionnelles)
- **ROI rapide et mesurable** (diminution des pertes, gain de temps)

### Persona cibles prioritaires

1. **Directeur de PME BTP** (40-55 ans, préoccupé par les coûts et l'efficacité)
2. **Responsable matériel/logistique** (35-45 ans, soucieux de l'organisation)
3. **Chef de chantier** (30-50 ans, frustré par les pertes de temps)

## Avantages du Statut de Nouvelle Entreprise

### Transformer votre nouveauté en force

- **Agilité et réactivité**: Adaptation rapide aux besoins spécifiques des premiers clients
- **Support personnalisé**: Attention particulière aux premiers utilisateurs
- **Influence sur le développement**: Participation à l'évolution du produit
- **Conditions préférentielles**: Avantages exclusifs pour les premiers adoptants

### Programme "Pionniers ForTooling"

- Réduction tarifaire substantielle pour les 20 premiers clients
- Support direct avec les fondateurs/développeurs
- Mise en avant future (avec accord) comme partenaires de la première heure
- Webinaires exclusifs et rencontres networking

## Utilisation Stratégique des Données Sectorielles

### Statistiques BTP exploitables (à sourcer)

- Taux moyen de perte d'équipements dans le secteur (15-20% annuel)
- Coût moyen du remplacement de matériel (X€/an pour une PME moyenne)
- Temps quotidien perdu à rechercher du matériel (20-30 min/personne/jour)
- Impact financier des retards de chantier liés aux problèmes d'équipement

### Calculs de ROI à mettre en avant

- Simulateur d'économies basé sur taille de l'entreprise et parc d'équipement
- Coût réel des pertes vs investissement ForTooling
- Valorisation du temps gagné en recherche de matériel
- Économies liées à la prolongation de la durée de vie des équipements

## Approche Content Marketing Adaptée

### Contenu de valeur à créer en priorité

- Guide: "Comment réduire les pertes de matériel sur vos chantiers"
- Ebook: "Les coûts cachés d'une mauvaise gestion d'équipements"
- Calculateur: "Estimez vos pertes annuelles d'équipements"
- Checklist: "10 bonnes pratiques pour augmenter la durée de vie de votre matériel"

### Partenariats de contenu stratégiques

- Collaboration avec médias BTP pour articles d'expertise
- Interviews de dirigeants et experts du secteur sur leurs problématiques
- Webinaires co-organisés avec fournisseurs d'équipements
- Présence sur salons professionnels avec offre spéciale salon

## Stratégie d'Acquisition Adaptée aux Débuts

### Canaux prioritaires

- LinkedIn: ciblage précis des décideurs BTP
- Google Ads: mots-clés spécifiques à forte intention
- Démarchage direct: approche personnalisée des premiers clients
- Réseaux d'entrepreneurs et associations BTP

### Tactiques d'acquisition créatives

- "Test Challenge": Essai comparatif de ForTooling vs méthode actuelle pendant 14 jours
- Démonstrations in situ sur petits parcs d'équipements
- Programme parrainage avant même le lancement
- Offres groupées pour fédérations/groupements d'entreprises BTP

----
docs-and-prompts/market/strategie-marketing-fortooling.md
# Stratégie Marketing et Tunnel de Conversion ForTooling

## 1. Positionnement Stratégique

### 1.1 Unique Selling Proposition (USP)

"ForTooling : La solution de gestion d'équipements BTP la plus simple et abordable du marché - Suivez tout votre matériel pour moins de 2€ par jour."

### 1.2 Points de différenciation clés

- **Prix ultra-compétitif** (50-70% moins cher que les concurrents)
- **Zéro matériel coûteux** (utilisation de QR codes/NFC vs balises GPS onéreuses)
- **Solution terrain adaptée aux chantiers** (interface simplifiée, étiquettes résistantes)
- **Mise en place en moins de 48h** (vs semaines pour solutions concurrentes)
- **ROI immédiat et mesurable** (diminution des pertes, gain de temps)

### 1.3 Persona cibles prioritaires

1. **Directeur de PME BTP** (40-55 ans, préoccupé par les coûts et l'efficacité)
2. **Responsable matériel/logistique** (35-45 ans, soucieux de l'organisation)
3. **Chef de chantier** (30-50 ans, frustré par les pertes de temps)

## 2. Architecture du Tunnel de Conversion

### 2.1 Étape 1: Attraction (Top du Funnel)

- **SEO ciblé** sur requêtes problématiques ("perte matériel chantier", "gestion outillage BTP")
- **Google Ads** sur mots-clés transactionnels à fort intent
- **Posts LinkedIn** ciblant les décideurs BTP (format statistiques choc + solution)
- **Publicité dans médias spécialisés BTP** (print et digital)

### 2.2 Étape 2: Intérêt (Landing Page)

- **Hero section impactante**:

  - Headline: "Fini les pertes de matériel: suivez tous vos équipements BTP pour 1,90€ par jour"
  - Sous-title: "Solution simple par QR code - Mise en place en 48h - Sans engagement"
  - Démonstration vidéo courte (30s) montrant la simplicité d'utilisation
  - CTA principal: "ESSAI GRATUIT 14 JOURS" (en orange, contrasté)
  - Preuve sociale: "Déjà +3000 équipements suivis dans 47 entreprises BTP"

- **Section problème-solution immédiate** (priorité #1):
  | PROBLÈME | NOTRE SOLUTION | BÉNÉFICE CHIFFRÉ |
  |----------|----------------|------------------|
  | 15-20% des équipements perdus chaque année | Localisation instantanée par QR code | Économie de 5 000-15 000€/an |
  | 30 min/jour perdues à chercher du matériel | Inventaire accessible en 3 clics | Gain de 125h/an/employé |
  | Attribution floue et déresponsabilisation | Traçabilité complète par utilisateur | -70% d'équipements non retournés |
  | Solutions concurrentes à 5-10K€ | Prix fixe ultra-compétitif | ROI dès le premier mois |

### 2.3 Étape 3: Considération (Mid-Funnel)

- **Démonstration du fonctionnement** (3 étapes ultra-simples):

  1. **ÉTIQUETEZ** vos équipements avec nos QR codes ultra-résistants
  2. **SCANNEZ** pour attribuer ou déplacer (3 secondes par scan)
  3. **CONTRÔLEZ** votre parc complet depuis le dashboard

- **Section témoignages** avec métriques précises:

  - "Nous avons réduit nos pertes d'équipements de 83% en 3 mois" - Martin D., Directeur, MTP Construction
  - "Économie de 12 500€ la première année et gain de temps quotidien" - Sophie L., Resp. Logistique, BatiPro
  - Inclure photos, logos d'entreprises et postes spécifiques

- **Social proof renforcée**:
  - Compteur en temps réel d'équipements suivis
  - Logos clients (avec autorisations)
  - Notation clients (4.8/5 basée sur X avis)

### 2.4 Étape 4: Conversion (Bottom Funnel)

- **Pricing stratégique**:

  - Afficher tarifs en "par jour" plutôt qu'en mensuel (perception de coût moindre)
  - Proposer 3 formules avec celle du milieu pré-sélectionnée (technique d'ancrage)
  - Comparer avec le "coût de ne rien faire" (pertes annuelles moyennes: 7500€)
  - Garantie "satisfait ou remboursé 30 jours" (réduction du risque perçu)

- **CTA d'essai gratuit omniprésent**:
  - Formulaire d'inscription ultra-simplifié (email + téléphone uniquement)
  - "Commencez en 2 minutes - Sans carte bancaire"
  - Décompte de temps limité: "Offre spéciale: -20% les 3 premiers mois si vous vous inscrivez aujourd'hui"

### 2.5 Étape 5: Onboarding (Post-conversion)

- **Séquence email automatisée**:

  - J1: Guide de démarrage rapide + vidéo personnalisée
  - J3: Check-in "Besoin d'aide?" + cas d'usage clés
  - J7: Partage de succès clients similaires
  - J10: Invitation démonstration personnalisée
  - J12: Rappel fin d'essai + témoignages résultats
  - J14: Offre spéciale première année + formulaire CB

- **Relance téléphonique stratégique**:
  - Appel à J5: "Comment se passe votre essai? Des questions?"
  - Appel à J13: "Prêt à continuer? Offre spéciale réservée pour vous"

## 3. Optimisation SEO Stratégique

### 3.1 Mots-clés prioritaires

- **Intention transactionnelle forte**:

  - "logiciel gestion équipement BTP"
  - "suivi matériel chantier QR code"
  - "solution traçabilité outils construction"
  - "gestion inventaire entreprise BTP"

- **Intention informationnelle** (content marketing):
  - "comment réduire pertes matériel chantier"
  - "coût perte équipement construction"
  - "responsabilisation équipe BTP"
  - "ROI gestion parc équipements"

### 3.2 Structure de contenu SEO

- **Pages de landing spécifiques par problématique**:

  - /reduction-pertes-materiels-chantier
  - /suivi-outils-qr-code
  - /gestion-attribution-equipements-btp
  - /economie-gestion-materiel-construction

- **Blog optimisé** (minimum 2 articles/mois):
  - "Comment cette entreprise a économisé 15 000€ en réduisant ses pertes de matériel"
  - "Guide: Calculez ce que vous coûtent vraiment vos pertes d'équipements"
  - "5 techniques pour responsabiliser vos équipes sur le matériel"
  - "Étude de cas: De l'Excel à ForTooling - Transformation digitale d'un parc matériel"

### 3.3 Optimisations techniques

- **Schema.org markup** pour:

  - Témoignages (Review Schema)
  - Tarifs (Offer Schema)
  - FAQ (FAQPage Schema)
  - Organisation (Organization Schema)

- **Core Web Vitals** optimisés pour mobile:
  - LCP < 2.5s (images optimisées, serveur rapide)
  - FID < 100ms (JavaScript non-bloquant)
  - CLS < 0.1 (layout stable, fonts préchargées)

## 4. Conversion Rate Optimization (CRO)

### 4.1 Tests A/B prioritaires

1. **Hero Section**:

   - Headline axé problème vs headline axé solution
   - CTA "Essai gratuit" vs "Voir la démo en 2 min"
   - Vidéo autoplay vs image statique

2. **Formulaire de conversion**:

   - Minimal (email uniquement) vs standard (email + téléphone)
   - Pop-up vs inline
   - Avec/sans countdown timer

3. **Preuve sociale**:
   - Logos clients vs témoignages détaillés
   - Statistiques chiffrées vs histoires de réussite
   - Placement haut vs bas de page

### 4.2 Micro-conversions à tracker

- Pourcentage de scroll (≥70% = intent)
- Temps passé sur page (≥2min = intent)
- Clics sur témoignages (fort intent)
- Visionnage vidéo démo (fort intent)
- Ouverture FAQ (intent modéré)

### 4.3 Objections à lever explicitement

- **Objection prix**: "Plus abordable qu'un seul équipement perdu par mois"
- **Objection complexité**: "Prise en main en moins de 5 minutes, même sans compétence technique"
- **Objection temps**: "Déploiement en 48h sans perturber votre activité"
- **Objection internet**: "Fonctionne hors-ligne sur les chantiers isolés"
- **Objection engagement**: "Sans engagement - Résiliable à tout moment"

## 5. Éléments Visuels Marketing Stratégiques

### 5.1 Images à fort impact

- **Avant/Après visuel**: Chaos d'équipements vs organisation parfaite
- **ROI visualisé**: Graphique économies réalisées vs coût solution
- **Contexte réel**: Photos sur chantiers authentiques, pas de stock photos
- **Process simplifié**: Infographie 3 étapes (étiqueter → scanner → contrôler)

### 5.2 Vidéos persuasives

- **Démo ultra-courte** (30s) en autoplay sans son: scan → dashboard → localisation
- **Témoignage client** (1min): problème → solution → résultats mesurables
- **Explication technique** (2min): pour rassurer décideurs techniques

### 5.3 Confiance et crédibilité

- **Badges sécurité/RGPD**: conformité, sécurité des données
- **Logos partenaires/clients**: reconnaissance par l'écosystème
- **Certifications**: labels qualité, innovation
- **Médias**: mentions presse spécialisée BTP

## 6. Tactiques de Growth Hacking

### 6.1 Acquisition non-conventionnelle

- **Partenariats fournisseurs BTP**: offre groupée avec vendeurs d'équipements
- **Programme ambassadeur**: commission pour chaque entreprise référée
- **Webinaires ciblés**: "Comment réduire vos pertes d'équipements de 70% en 30 jours"
- **Défi gratuit**: "Testez pendant 14 jours et mesurez vos économies - Résultats garantis"

### 6.2 Rétention optimisée

- **Gamification**: score "d'efficacité matériel" comparé à la moyenne du secteur
- **Alertes ROI**: notifications des économies réalisées
- **Check-in trimestriel**: rapport personnalisé d'optimisation avec consultant
- **Communauté**: groupe privé d'échange entre responsables matériel

### 6.3 Referral Engine

- **Programme "Parrainez un artisan"**: 2 mois offerts pour chaque référence
- **Co-marketing**: témoignages clients en échange de visibilité
- **Contenu co-créé**: études de cas détaillées avec clients ambassadeurs

## 7. Plan d'Implémentation Prioritaire

### 7.1 Actions immédiates (J+0 à J+30)

1. Refonte de la landing page avec structure de conversion optimisée
2. Mise en place des tunnels d'emails automatisés pré/post essai
3. Création de 3 témoignages clients détaillés (vidéo + texte)
4. Configuration tracking analytics conversion (objectifs GA4/Meta)
5. Lancement campagne Google Ads sur mots-clés prioritaires

### 7.2 Seconde phase (J+30 à J+90)

1. Développement de 5 articles de blog optimisés SEO
2. Création landing pages spécifiques par problématique
3. Mise en place programme de parrainage client
4. Lancement tests A/B principaux (headline, CTA, formulaire)
5. Développement automatisation relances essais gratuits

### 7.3 KPIs critiques à suivre

- Taux de conversion visiteur → essai gratuit (objectif: >5%)
- Taux de conversion essai → client payant (objectif: >30%)
- CAC (Coût d'Acquisition Client) (objectif: <3 mois de revenu)
- LTV (Lifetime Value) (objectif: >24 mois)
- Taux de churn mensuel (objectif: <3%)

## 8. Messages Persuasifs Clés (Copywriting)

### 8.1 Headlines A/B testés

- "Stop aux 7500€ perdus chaque année en équipements égarés sur vos chantiers"
- "Suivez 100% de vos équipements BTP pour moins de 2€ par jour - Sans matériel coûteux"
- "Vos outils toujours localisés, vos équipes responsabilisées, votre budget préservé"
- "Cette solution QR code a permis à 47 entreprises BTP d'économiser 350 000€ de matériel"

### 8.2 Éléments de friction à éliminer

- Formulaire trop long (réduire au strict minimum)
- Jargon technique (simplifier le langage)
- Prix mensuel (préférer affichage quotidien ou annuel avec économies)
- Étapes multiples (réduire au maximum les clics vers conversion)

### 8.3 Modificateurs de valeur perçue

- Calcul personnalisé des économies potentielles
- Comparatif direct avec solutions concurrentes
- Démonstration du temps économisé (convertir en euros)
- Garantie "Satisfait ou Remboursé" proéminente

---

**RAPPEL STRATÉGIQUE**: L'objectif principal n'est pas de "vendre" mais de convaincre d'essayer le produit gratuitement pendant 14 jours. La véritable conversion s'effectuera grâce à l'expérience produit elle-même et au processus d'onboarding soigneusement orchestré.

----
docs-and-prompts/market/pages-techniques-parcours.md
# Pages Techniques et Parcours Utilisateur

## Pages Techniques et Légales

### Pages Légales Essentielles

1. **CGV/CGU**

   - Conditions claires et transparentes
   - Langage accessible (éviter jargon juridique excessif)
   - Sections bien structurées par thème
   - Date de dernière mise à jour visible

2. **Politique de confidentialité (RGPD)**

   - Données collectées et finalités
   - Conservation et protection des données
   - Droits des utilisateurs
   - Utilisation des cookies
   - Procédures de demande d'accès/suppression

3. **Mentions légales**

   - Informations société
   - Hébergement
   - Directeur de publication
   - Propriété intellectuelle
   - Limitations de responsabilité

4. **Conditions d'utilisation du service**
   - Droits d'utilisation
   - Restrictions d'usage
   - Garanties et limites
   - Résiliation et suspension
   - Support et maintenance

### Pages Techniques à Développer

1. **Sécurité des données**

   - Architecture sécurisée
   - Chiffrement et protection
   - Sauvegardes et redondance
   - Conformité RGPD
   - Tests de sécurité réguliers

2. **API et intégrations**

   - Documentation API (même basique pour le futur)
   - Intégrations existantes ou prévues
   - Procédure de demande d'accès API
   - Cas d'usage d'intégration
   - Support développeurs

3. **Guide utilisateur/Centre d'aide**
   - Navigation par rôle utilisateur
   - Recherche intégrée
   - Articles base de connaissances
   - Vidéos tutoriels courtes
   - FAQ technique détaillée

## Optimisation des Parcours Utilisateur

### Parcours d'Onboarding

1. **Page "Premiers pas avec ForTooling"**

   - Guide visuel étape par étape
   - Vidéo d'introduction (2-3 min)
   - Checklist interactive de démarrage
   - Jalons d'activation clairs
   - Contact support dédié nouvel utilisateur

2. **Guides spécifiques par profil utilisateur**

   - Pour administrateurs système
   - Pour responsables matériel
   - Pour utilisateurs terrain
   - Pour chefs de chantier/projet
   - Pour direction/décideurs (rapports)

3. **Vidéos d'initiation courtes**

   - Série "Démarrer en 10 minutes"
   - Tutoriels ciblés par fonctionnalité (1-2 min)
   - Démos cas d'usage courants
   - Astuces et raccourcis
   - Questions fréquentes visuelles

4. **Checklist de démarrage**
   - Étapes essentielles séquentielles
   - Indicateurs de progression
   - Validation des étapes complétées
   - Contenus d'aide contextuelle
   - Célébration des succès d'activation

### Programme Partenaires/Affiliés

1. **Page Programme Ambassadeur**

   - Présentation des avantages
   - Fonctionnement de la commission
   - Témoignages partenaires (une fois existants)
   - Outils marketing fournis
   - FAQ programme partenaire

2. **Commission référencement**

   - Grille de commission transparente
   - Processus de tracking des leads
   - Conditions de paiement
   - Tableau de bord partenaire
   - Support dédié partenaires

3. **Processus d'inscription**

   - Critères d'éligibilité
   - Formulaire de candidature
   - Étapes de validation
   - Formation initiale partenaire
   - Kit de démarrage

4. **Avantages et conditions**
   - Avantages financiers détaillés
   - Formations exclusives
   - Accès anticipé nouvelles fonctionnalités
   - Co-marketing opportunités
   - Événements partenaires

## Stratégie de Contenu par Phase

### Phase 1 (Lancement - 3 premiers mois)

1. Landing page principale
2. Pages Fonctionnalités, Tarifs, À propos
3. Page Comment ça marche
4. FAQ essentielle
5. Blog (3-5 articles initiaux)
6. Pages légales obligatoires

**Priorité**: Conversion des premiers visiteurs en utilisateurs

### Phase 2 (Développement - 3-6 mois)

1. Pages sectorielles (2-3 premières)
2. Centre de ressources basique
3. Expansion du blog (1-2 articles/semaine)
4. Témoignages initiaux (dès premiers clients)
5. FAQ approfondie

**Priorité**: SEO et création d'autorité dans le domaine

### Phase 3 (Optimisation - 6-12 mois)

1. Études de cas détaillées
2. Contenus avancés (webinaires, podcasts)
3. Pages partenaires et intégrations
4. Contenu généré par utilisateurs
5. Communauté utilisateurs

**Priorité**: Rétention et expansion de l'écosystème

## Recommandations pour Mise en Œuvre

1. **Prioriser selon impact sur conversion**:

   - Landing page → Fonctionnalités → Tarifs → Comment ça marche

2. **Créer une structure modulaire**:

   - Composants réutilisables (témoignages, CTA, avantages)
   - Système de blocs cohérents

3. **Maintenir cohérence visuelle et messagerie**:

   - Palette de couleurs consistante
   - Mêmes messages clés sur toutes les pages
   - Iconographie et illustrations harmonisées

4. **Optimiser pour mobile en priorité**:

   - Interface simplifiée
   - CTAs adaptés (plus grands sur mobile)
   - Navigation intuitive

5. **Intégrer mesure et analytics**:
   - Événements de conversion sur chaque page
   - Heatmaps sur pages critiques
   - Tests A/B progressifs

----
docs-and-prompts/market/pages-support-conversion.md
# Pages de Support à la Conversion

## Page "Comment ça marche" approfondie

### Structure recommandée

- Vidéo explicative (1-2 min)
- Processus détaillé en 5-7 étapes
- Zoom sur l'implémentation (48h)
- Témoignages d'experts sectoriels (si pas de clients, consultants BTP)
- FAQ spécifiques à l'implémentation
- CTA: "Voir une démo" + "Essai gratuit"

### Processus à détailler

1. **Inscription et configuration initiale** (15 min)

   - Création du compte entreprise
   - Configuration des paramètres clés
   - Personnalisation des catégories d'équipements

2. **Import initial des équipements** (1-2h)

   - Upload de fichier Excel existant ou
   - Saisie manuelle simplifiée ou
   - Assistance à l'import par notre équipe

3. **Étiquetage des équipements** (progressif)

   - Réception des QR codes résistants
   - Application sur les équipements
   - Scan initial de référencement

4. **Formation des utilisateurs** (30 min)

   - Session de démonstration
   - Guide pas-à-pas dans l'application
   - Accès à des tutoriels vidéo

5. **Déploiement terrain** (1-3 jours)

   - Premiers scans en conditions réelles
   - Suivi des premières attributions
   - Ajustement des processus si nécessaire

6. **Optimisation continue**
   - Analyse des premiers jours d'utilisation
   - Recommandations personnalisées d'utilisation
   - Ajout progressif d'équipements supplémentaires

### Éléments visuels à inclure

- Calendrier visuel du déploiement
- Screenshots étape par étape
- Exemples de QR codes et étiquettes
- Témoignages visuels de satisfaction

## Page "FAQ" complète

### Structure recommandée

- Sections par thématique
- Questions organisées de générales à spécifiques
- Réponses concises mais complètes
- Liens vers pages détaillées
- CTA contextuel après chaque section

### Catégories et questions essentielles

#### Questions générales

- Qu'est-ce que ForTooling exactement?
- Comment ForTooling se compare-t-il aux solutions existantes?
- Combien de temps pour être opérationnel?
- ForTooling est-il adapté à une petite entreprise?
- Puis-je essayer ForTooling avant de m'engager?

#### Questions techniques

- Les QR codes résistent-ils aux conditions de chantier?
- Que se passe-t-il si je n'ai pas de connexion sur le chantier?
- Quels appareils sont compatibles avec ForTooling?
- Les données sont-elles sécurisées?
- Puis-je exporter mes données facilement?

#### Questions d'implémentation

- Comment importer mon inventaire existant?
- Comment former mes équipes à l'utilisation?
- Combien de temps pour étiqueter tout mon matériel?
- Puis-je déployer progressivement la solution?
- Quel support recevrai-je pendant l'implémentation?

#### Questions tarifaires

- Y a-t-il des coûts cachés ou supplémentaires?
- Que comprend exactement chaque forfait?
- Puis-je changer de forfait en cours d'abonnement?
- Comment fonctionne la période d'essai?
- Offrez-vous des remises pour engagement annuel?

#### Questions support et utilisation

- Quel support est disponible en cas de problème?
- Proposez-vous des formations avancées?
- Comment suggérer de nouvelles fonctionnalités?
- Quelle est la disponibilité du service (uptime)?
- Comment contacter le support technique?

## Page "Contact/Démo"

### Structure recommandée

- Options de contact (formulaire, email, téléphone)
- Planification de démo (calendrier Calendly)
- Processus de démonstration expliqué
- Formulaire contact intelligent (qualification leads)
- CTA secondaire: "Essai gratuit immédiat"

### Formulaire de contact stratégique

- Nom et prénom
- Email professionnel
- Téléphone (optionnel mais recommandé)
- Entreprise et fonction
- Taille de l'entreprise (dropdown)
- Nombre approximatif d'équipements à suivre
- Problématique principale (dropdown)
- Message personnalisé
- Préférence de contact (email, téléphone, visioconférence)

### Section démo personnalisée

- Titre: "Découvrez ForTooling en action sur vos cas d'usage"
- Explication: Démo personnalisée de 20 minutes
- Bénéfices: Focus sur vos besoins spécifiques
- Processus en 3 étapes (Prise de RDV → Préparation → Démonstration)
- Calendrier intégré pour réserver un créneau
- Témoignage sur qualité des démos

### Informations de contact direct

- Numéro de téléphone dédié
- Email de contact
- Horaires de disponibilité
- Temps de réponse moyen
- Chat en direct (si disponible)

----
docs-and-prompts/market/pages-seo-sectorielles.md
# Pages Stratégiques SEO et Contenu Sectoriel

## Pages sectorielles/cas d'usage

Ces pages ciblent des sous-segments spécifiques avec un contenu optimisé pour le référencement et la conversion.

### 1. "ForTooling pour la maçonnerie"

#### Structure recommandée

- Introduction aux défis spécifiques de gestion d'équipements en maçonnerie
- Statistiques sectorielles (pertes d'outils, temps de recherche)
- Fonctionnalités ForTooling adaptées à la maçonnerie
- Catégories d'équipements pré-configurées
- Cas d'usage concrets (chantier type)
- Bénéfices chiffrés spécifiques
- Témoignage expert/consultant secteur (si pas encore de client)
- CTA sectoriel

#### Mots-clés à cibler

- gestion équipement maçonnerie
- suivi matériel chantier construction
- localisation outils maçons
- QR code suivi bétonnière/coffrage
- gestion prêt matériel maçonnerie

#### Équipements spécifiques à mentionner

- Bétonnières et malaxeurs
- Échafaudages et étais
- Outillage manuel spécifique
- Coffrages et banches
- Équipements de mesure et niveau

### 2. "ForTooling pour l'électricité/plomberie"

#### Structure recommandée

- Introduction aux problématiques des artisans multi-sites
- Coût des outils spécialisés et impact des pertes
- Fonctionnalités ForTooling pour interventions multiples
- Gestion des équipements techniques coûteux
- Attribution aux techniciens itinérants
- Suivi et maintenance des outils de mesure
- ROI calculé pour artisan type
- CTA adapté

#### Mots-clés à cibler

- gestion outillage électricien
- suivi matériel plomberie
- attribution équipement techniciens
- traçabilité outils électroportatifs
- inventaire camion artisan

#### Équipements spécifiques à mentionner

- Outillage électroportatif
- Appareils de mesure et test
- Échelles et accès en hauteur
- Équipements de sécurité
- Stock véhicules d'intervention

### 3. "ForTooling pour les locations de matériel"

#### Structure recommandée

- Introduction aux défis de la location d'équipements
- Problématique des retours et suivi
- Fonctionnalités de gestion entrées/sorties
- Traçabilité complète et historique
- Suivi état et maintenance des équipements
- Intégration facturation et gestion client
- Avantages compétitifs pour loueurs
- CTA spécifique location

#### Mots-clés à cibler

- gestion parc location BTP
- suivi retour équipements loués
- QR code location matériel
- logiciel gestion entrées sorties matériel
- traçabilité équipements location

#### Fonctionnalités spécifiques à mettre en avant

- Check-in/check-out rapide
- Suivi état avant/après location
- Historique par client/équipement
- Alertes retards de retour
- Planning disponibilité matériel

### 4. "ForTooling pour les chefs de chantier"

#### Structure recommandée

- Introduction aux défis quotidiens des chefs de chantier
- Impact sur la productivité et planning
- Fonctionnalités d'allocation des ressources
- Visibilité en temps réel sur les équipements
- Planification besoins matériels par phase
- Responsabilisation des équipes
- Gain de temps quotidien estimé
- CTA orienté productivité

#### Mots-clés à cibler

- gestion équipement chef chantier
- planification ressources matérielles BTP
- disponibilité outils chantier
- responsabilisation équipe matériel
- optimisation utilisation équipements construction

#### Avantages spécifiques à mettre en avant

- Réduction temps recherche matériel
- Anticipation besoins par phase chantier
- Suivi utilisation par équipe/ouvrier
- Réduction conflits attribution matériel
- Meilleure planification ressources

## Blog et Ressources

### Catégories d'articles à développer

1. **Guides pratiques**

   - Conseils d'optimisation de gestion d'équipements
   - Tutoriels étape par étape
   - Check-lists et processus

2. **Études sectorielles**

   - Statistiques et tendances BTP
   - Benchmarks et comparatifs
   - Analyse coûts cachés

3. **Conseils et meilleures pratiques**

   - Organisation et méthodes
   - Responsabilisation des équipes
   - Optimisation des processus

4. **Innovations technologiques**

   - Nouveautés dans le BTP
   - Technologies de traçabilité
   - Digitalisation des chantiers

5. **Témoignages et cas d'usage**
   - Interviews experts
   - Retours d'expérience
   - Études de cas

### Articles initiaux prioritaires

1. **"Les coûts cachés d'une mauvaise gestion d'équipements BTP"**

   - Chiffrer les pertes financières réelles
   - Impact sur productivité et délais
   - Coûts indirects (recherche, remplacement, conflits)
   - Solution et calcul ROI

2. **"Comment réduire de 70% vos pertes de matériel sur chantier"**

   - Statistiques pertes secteur BTP
   - Causes principales identifiées
   - Méthodologie de réduction en 5 étapes
   - Technologies facilitantes

3. **"QR codes vs RFID vs GPS: quelle technologie de suivi pour vos équipements?"**

   - Comparatif détaillé des technologies
   - Avantages/inconvénients de chaque solution
   - Critères de choix selon besoins
   - Analyse coûts/bénéfices

4. **"5 indicateurs clés pour évaluer l'efficacité de votre gestion de parc matériel"**

   - KPIs essentiels à suivre
   - Méthodes de calcul et benchmarks
   - Outils de mesure recommandés
   - Plan d'amélioration continu

5. **"Guide: Comment mettre en place un système de traçabilité en 1 semaine"**
   - Planification et préparation
   - Étapes jour par jour
   - Ressources nécessaires
   - Conseils pour adoption rapide

## Centre de Ressources

### Types de contenus à proposer

- **Guides téléchargeables (PDF)**

  - Guides approfondis et bien structurés
  - Design professionnel avec illustrations
  - Contenu actionnable et pratique

- **Templates et calculateurs (Excel)**

  - Outils prêts à l'emploi
  - Formules et automatisations utiles
  - Instructions d'utilisation claires

- **Checklists imprimables**

  - Format synthétique et pratique
  - Points essentiels à vérifier
  - Personnalisables par l'utilisateur

- **Vidéos tutoriels**

  - Courtes (3-5 minutes maximum)
  - Démonstrations pas-à-pas
  - Sous-titrées et bien structurées

- **Webinaires enregistrés**
  - Présentations thématiques (30-45 min)
  - Q&A incluses
  - Slides téléchargeables

### Ressources initiales prioritaires

1. **"Guide ultime de la gestion d'équipements BTP" (ebook)**

   - 15-20 pages approfondies
   - Illustrations et schémas
   - Conseils pratiques et méthodologie
   - Études de cas et exemples

2. **"Calculateur ROI ForTooling" (spreadsheet interactif)**

   - Calculateur d'économies personnalisé
   - Projection sur 1, 2 et 3 ans
   - Comparaison avant/après
   - Graphiques automatisés

3. **"Checklist: Préparer votre migration vers un système digital"**

   - Liste de contrôle pré-migration
   - Étapes essentielles chronologiques
   - Points de vigilance et conseils
   - Format imprimable A4

4. **"10 astuces pour maximiser la durée de vie de vos équipements"**
   - Guide pratique maintenance préventive
   - Conseils stockage et manipulation
   - Fréquences d'entretien recommandées
   - Estimation économies réalisables

----
docs-and-prompts/market/pages-essentielles.md
# Pages Essentielles à Développer pour ForTooling

## Page "Fonctionnalités" détaillée

### Structure recommandée

- Introduction avec bénéfices globaux
- Sections par fonctionnalité majeure avec captures d'écran
- Comparaison discrète avec solutions concurrentes
- Cas d'usage par fonctionnalité
- CTA: "Essayer gratuitement" + "Demander une démo"

### Éléments clés à inclure

- **Module Inventaire**

  - Catalogage complet des équipements
  - Catégorisation flexible adaptée au BTP
  - Informations techniques et commerciales
  - Gestion des cycles de vie (acquisition → maintenance → retrait)

- **Module Suivi QR/NFC**

  - Processus de scan rapide (3 secondes)
  - Localisation instantanée des équipements
  - Historique complet des mouvements
  - Fonctionnement hors-ligne sur chantier

- **Module Attribution**

  - Assignation aux utilisateurs/équipes
  - Attribution à des projets/chantiers
  - Gestion des dates de retour prévues
  - Alertes de non-retour automatiques

- **Module Reporting**

  - Dashboard personnalisable
  - Statistiques d'utilisation et disponibilité
  - Calcul ROI et économies réalisées
  - Exports PDF/Excel des rapports clés

- **Fonctionnalités spéciales BTP**
  - Étiquettes ultra-résistantes (poussière, eau, UV)
  - Interface utilisable avec gants de chantier
  - Vocabulaire et catégories pré-configurés BTP
  - Champs personnalisés adaptés au secteur

## Page "Tarifs" transparente

### Structure recommandée

- Introduction sur approche tarifaire (transparence, simplicité)
- 3 plans avec options clairement définies
- Comparaison des fonctionnalités par plan
- FAQ spécifiques aux prix
- CTA: "Démarrer avec [plan]" + "Contact commercial"

### Plans tarifaires

1. **Plan Essentiel**

   - Pour TPE/artisans (1-5 utilisateurs)
   - Jusqu'à 100 équipements
   - Fonctionnalités de base
   - Prix: [X]€/mois ou [Y]€/jour

2. **Plan Business**

   - Pour PME (5-20 utilisateurs)
   - Jusqu'à 500 équipements
   - Fonctionnalités avancées + rapports
   - Prix: [X]€/mois ou [Y]€/jour

3. **Plan Enterprise**
   - Pour grandes entreprises (20+ utilisateurs)
   - Équipements illimités
   - Toutes fonctionnalités + personnalisation
   - Prix: [X]€/mois ou [Y]€/jour

### Avantages tarifaires à mettre en avant

- Pas de coût matériel supplémentaire
- Économies réalisées vs pertes actuelles
- Prix par jour (perception moins coûteuse)
- Engagement flexible ou remise annuelle
- Offre spéciale de lancement (-50% premiers clients)

## Page "À propos / Notre histoire"

### Structure recommandée

- Histoire de création (problème observé → solution)
- Mission et vision (démocratiser la gestion d'équipements BTP)
- Équipe (même petite, montrer les visages)
- Valeurs (simplicité, accessibilité, innovation)
- Programme Pionnier mis en avant
- CTA: "Rejoindre l'aventure ForTooling"

### Éléments narratifs à développer

- Origine de l'idée (expérience terrain BTP, observation problématiques)
- Approche différenciatrice (simplicité vs solutions complexes existantes)
- Vision du futur de la gestion d'équipements
- Parcours de développement du produit
- Ambitions et roadmap produit à venir

### Éléments de confiance

- Expertise combinée BTP et technologie
- Approche centrée sur problématiques terrain
- Témoignages experts/consultants sectoriels
- Mentions médias/partenaires (si disponibles)
- Engagement qualité et support réactif

----
docs-and-prompts/market/contenu-landing-page.md
# Contenu Optimisé pour Landing Page ForTooling

## 1. Hero Section

### Titre Principal (Options)

- "Gérez enfin vos équipements BTP sans vous ruiner"
- "Suivez tous vos équipements BTP pour moins de 2€ par jour"
- "Solution innovante pour localiser votre matériel de chantier"

### Sous-titre

"Solution simple par QR code - Mise en place en 48h - Sans engagement"

### CTA Principal

"ESSAYEZ GRATUITEMENT PENDANT 14 JOURS"

### Mention Offre de Lancement

"OFFRE SPÉCIALE LANCEMENT: -50% pour nos 20 premiers clients + implémentation offerte"

### Visuel Stratégique

Image/vidéo montrant la solution en action sur un chantier réel

- Scan QR code sur un équipement
- Vue du dashboard avec localisation
- Interface mobile en situation de chantier

## 2. Section Problème-Solution

### Introduction

"Les entreprises du BTP font face à des défis quotidiens dans la gestion de leur matériel. ForTooling apporte une solution simple et abordable."

### Tableau Problème-Solution

| PROBLÈME DANS LE SECTEUR                                                          | NOTRE SOLUTION                                                            | BÉNÉFICE POTENTIEL                                          |
| --------------------------------------------------------------------------------- | ------------------------------------------------------------------------- | ----------------------------------------------------------- |
| Les entreprises BTP perdent en moyenne 15-20% de leurs équipements chaque année\* | Localisation instantanée par QR code et historique complet des mouvements | Réduction drastique des pertes et vols d'équipements        |
| Jusqu'à 30 minutes par jour perdues à chercher du matériel sur les chantiers\*    | Inventaire accessible en 3 clics avec localisation précise                | Gain de temps quotidien pour vos équipes                    |
| Attribution floue menant à la déresponsabilisation                                | Traçabilité complète par utilisateur et notifications de non-retour       | Responsabilisation des équipes et meilleur soin du matériel |
| Solutions traditionnelles complexes et onéreuses (5-10K€)                         | Prix fixe ultra-compétitif sans matériel coûteux                          | ROI rapide et budget maîtrisé                               |

\*Selon étude sectorielle BTP Magazine 2023

## 3. Comment Ça Marche

### Étape 1: ÉTIQUETEZ

"Appliquez nos QR codes ultra-résistants sur vos équipements"

- Étiquettes waterproof et résistantes aux chocs
- Installation en quelques secondes par équipement
- Compatible avec tous types d'outils et machines

### Étape 2: SCANNEZ

"Utilisez votre smartphone pour scanner lors des mouvements"

- Scan rapide (3 secondes) lors des prises/retours
- Attribution à un utilisateur, projet ou emplacement
- Fonctionne même sans connexion internet sur le chantier

### Étape 3: CONTRÔLEZ

"Accédez à votre tableau de bord pour tout visualiser"

- Vue d'ensemble de votre parc matériel
- Localisation actualisée de chaque équipement
- Historique complet des mouvements et utilisations
- Alertes automatiques pour équipements non retournés

## 4. Avantages Clés ForTooling

### Simplicité Extrême

"Interface conçue pour être utilisée sur chantier, même avec des gants"

- Prise en main en moins de 5 minutes
- Pas de formation complexe nécessaire
- Utilisable par tous vos collaborateurs

### Prix Imbattable

"Solution jusqu'à 70% moins chère que les alternatives traditionnelles"

- À partir de 1,90€ par jour pour une PME
- Sans achat de matériel coûteux
- ROI généralement atteint dès le premier mois

### Adapté au Terrain

"Conçu pour résister aux conditions difficiles des chantiers"

- Étiquettes ultra-résistantes (poussière, eau, chocs)
- Application mobile robuste et réactive
- Mode hors-ligne pour chantiers isolés

### Déploiement Express

"Opérationnel en 48h, sans perturber votre activité"

- Assistance à la mise en place incluse
- Import facile de vos inventaires existants
- Support réactif par téléphone et email

## 5. Offre Spéciale Lancement

### Programme Pionnier ForTooling

"Rejoignez nos premiers utilisateurs et bénéficiez d'avantages exclusifs"

- **50% de réduction** sur l'abonnement première année
- **Mise en place et formation offertes** (valeur 500€)
- **Support prioritaire** avec accès direct à l'équipe
- **Influence sur les futures fonctionnalités**

_Limité aux 20 premiers clients_

### CTA Principal Renforcé

"RÉSERVEZ VOTRE PLACE DANS LE PROGRAMME PIONNIER"

### Garantie Satisfaction

"Essai 14 jours sans engagement - Satisfait ou remboursé 30 jours"

## 6. FAQ Stratégique

Questions traitant directement les objections potentielles:

- **Q: Est-ce vraiment adapté à une entreprise qui débute avec la gestion numérique?**
  R: Absolument! ForTooling a été conçu pour être aussi simple que possible, même pour les entreprises sans compétences techniques particulières.

- **Q: Les QR codes résistent-ils vraiment aux conditions de chantier?**
  R: Nos étiquettes sont spécialement conçues pour l'environnement BTP - résistantes à l'eau, la poussière, les UV et les chocs modérés.

- **Q: Comment ForTooling se compare aux grandes solutions du marché?**
  R: Nous offrons les fonctionnalités essentielles des grandes solutions (suivi, attribution, historique) mais à une fraction du prix et sans la complexité inutile.

- **Q: Que se passe-t-il si nous n'avons pas de connexion sur le chantier?**
  R: L'application fonctionne parfaitement hors-ligne et synchronise automatiquement les données dès qu'une connexion est disponible.

- **Q: Combien de temps pour être opérationnel?**
  R: La plupart de nos clients sont pleinement opérationnels en 24-48h, incluant l'étiquetage de leurs premiers équipements.

## 7. CTA Final

### Appel à l'action de clôture

"Rejoignez les entreprises BTP qui transforment leur gestion de matériel"

### Formulaire Simplifié

- Email professionnel
- Numéro de téléphone
- Taille approximative du parc d'équipements

### Bouton d'envoi

"DÉMARRER MON ESSAI GRATUIT"

### Réassurance finale

"Sans engagement - Configuration en 48h - Support inclus"

----
.vscode/tasks.json
{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run ESLint Fix",
			"type": "shell",
			"command": "bun run lint:fix",
			"group": "build",
			"presentation": {
				"reveal": "silent",
				"panel": "new"
			},
			"problemMatcher": []
		}
	]
}

----
.husky/pre-commit
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Check Prettier formatting
npm run format:check || (
  echo '❌ Prettier check failed.';
  false;
)

# Check ESLint rules
npm run lint || (
  echo '❌ ESLint check failed.';
  false;
)
----
.husky/_/prepare-commit-msg
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/pre-rebase
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/pre-push
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/pre-merge-commit
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/pre-commit
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/pre-auto-gc
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/pre-applypatch
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/post-rewrite
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/post-merge
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/post-commit
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/post-checkout
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/post-applypatch
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/husky.sh
echo "husky - DEPRECATED

Please remove the following two lines from $0:

#!/usr/bin/env sh
. \"\$(dirname -- \"\$0\")/_/husky.sh\"

They WILL FAIL in v10.0.0
"
----
.husky/_/h
#!/usr/bin/env sh
[ "$HUSKY" = "2" ] && set -x
n=$(basename "$0")
s=$(dirname "$(dirname "$0")")/$n

[ ! -f "$s" ] && exit 0

if [ -f "$HOME/.huskyrc" ]; then
	echo "husky - '~/.huskyrc' is DEPRECATED, please move your code to ~/.config/husky/init.sh"
fi
i="${XDG_CONFIG_HOME:-$HOME/.config}/husky/init.sh"
[ -f "$i" ] && . "$i"

[ "${HUSKY-}" = "0" ] && exit 0

export PATH="node_modules/.bin:$PATH"
sh -e "$s" "$@"
c=$?

[ $c != 0 ] && echo "husky - $n script failed (code $c)"
[ $c = 127 ] && echo "husky - command not found in PATH=$PATH"
exit $c

----
.husky/_/commit-msg
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.husky/_/applypatch-msg
#!/usr/bin/env sh
. "$(dirname "$0")/h"
----
.cursor/rules/rules-diagram-mermaid.mdc
---
description: 
globs: 
alwaysApply: true
---
erDiagram
Organization {
    string id PK
    string name
    string email
    string phone
    string address
    json settings
    string clerkId
    string stripeCustomerId
    string subscriptionId
    string subscriptionStatus
    string priceId
    date created
    date updated
}

User {
    string id PK
    string name
    string email
    string phone
    string role
    boolean isAdmin
    boolean canLogin
    string lastLogin
    file avatar
    boolean verified
    boolean emailVisibility
    string clerkId
    date created
    date updated
}

Equipment {
    string id PK
    string organizationId FK
    string name
    string qrNfcCode
    string tags
    editor notes
    date acquisitionDate
    string parentEquipmentId FK
    date created
    date updated
}

Project {
    string id PK
    string organizationId FK
    string name
    string address
    editor notes
    date startDate
    date endDate
    date created
    date updated
}

Assignment {
    string id PK
    string organizationId FK
    string equipmentId FK
    string assignedToUserId FK
    string assignedToProjectId FK
    date startDate
    date endDate
    editor notes
    date created
    date updated
}

Image {
    string id PK
    string title
    string alt
    string caption
    file image
    date created
    date updated
}

Organization ||--o{ User : has
Organization ||--o{ Equipment : owns
Organization ||--o{ Project : manages
Organization ||--o{ Assignment : oversees

User }o--o{ Assignment : "is assigned to"

Equipment }o--o{ Assignment : "is assigned via"
Equipment }o--o{ Equipment : "parent/child"

Project }o--o{ Assignment : includes

--END--